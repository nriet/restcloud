[{"appId":"etl","applicationId":"home","categoryId":"sys_rule_01","classPath":"","createTime":"2022-03-26 11:04:40","creator":"admin","creatorName":"管理员","editor":"admin","editorName":"管理员","editTime":"2022-04-17 23:11:54","example":"12****78","expireAfterIndexTime":"17/4/2022 08:45:24.258","id":"623e82c8646cc27b21b9eb03","inputParam":"0","paramDes":"","publicType":"1","remark":"中间位 1/2","ruleCode":"package cn.restcloud.etl.rule.ext;\r\n\r\nimport org.apache.commons.lang3.StringUtils;\r\nimport org.bson.Document;\r\nimport java.sql.Connection;\r\nimport cn.restcloud.framework.core.context.*;\r\nimport cn.restcloud.etl.base.IETLBaseEvent;\r\nimport cn.restcloud.etl.base.IETLBaseProcessEngine;\r\nimport cn.restcloud.framework.core.util.*;\r\nimport cn.restcloud.framework.core.util.db.rdb.*;\r\nimport java.util.*;\r\nimport com.alibaba.fastjson.JSONObject;\r\n\r\n/**\r\n作为规则节点运行时,返回0表示终止流程运行,返回1表示成功流程可继续运行\r\n节点规则时indoc为上一节点流入数据,其他规则为行数据\r\nfieldId为绑定的字段Id,如果是节点则则为空\r\nparams为绑定规则时填写的传入的参数\r\n通用脱敏\r\n2022-03-26 11:04:40\r\nadmin\r\n*/\r\n\r\npublic class SYS_RULE_01_000 implements IETLBaseEvent {\r\n\r\n\t@Override\r\n\tpublic String execute(IETLBaseProcessEngine engine, Document modelNodeDoc, Document indoc,String fieldId,String params) throws Exception {\r\n\t    String resultCode = \"\";\r\n\t    String plaintext = DocumentUtil.getString(indoc,fieldId);\r\n        if(StringUtils.isNotBlank(plaintext)){\r\n            char[] textCharArray = plaintext.toCharArray();\r\n    \t    for (int i = 0; i < textCharArray.length; i++) {\r\n    \t\t    if(i<textCharArray.length/4||i>(textCharArray.length-textCharArray.length/4-1)) {\r\n    \t\t\t    resultCode += textCharArray[i];\r\n    \t\t    }\r\n    \t\t    else {\r\n    \t\t\t    resultCode+=\"*\";\r\n    \t\t    }\r\n    \t    }\r\n    \t    indoc.put(fieldId,resultCode);\r\n        }\r\n\t\treturn \"1\";\r\n\t}\r\n}\r\n","ruleId":"sys_rule_01_000","ruleName":"通用脱敏","system":"1"},{"appId":"etl","applicationId":"home","categoryId":"sys_rule_01","classPath":"","createTime":"2022-03-26 11:05:29","creator":"admin","creatorName":"管理员","editor":"admin","editorName":"管理员","editTime":"2022-04-17 23:11:54","example":"*明  **明    欧**明","expireAfterIndexTime":"17/4/2022 08:45:15.033","id":"623e82f9646cc27b21b9eb45","inputParam":"0","paramDes":"","publicType":"1","remark":"2个字，展示后1位； 3个字，展示后1位； 3个字以上，展示前后1位","ruleCode":"package cn.restcloud.etl.rule.ext;\r\n\r\nimport org.apache.commons.lang3.StringUtils;\r\nimport org.bson.Document;\r\nimport java.sql.Connection;\r\nimport cn.restcloud.framework.core.context.*;\r\nimport cn.restcloud.etl.base.IETLBaseEvent;\r\nimport cn.restcloud.etl.base.IETLBaseProcessEngine;\r\nimport cn.restcloud.framework.core.util.*;\r\nimport cn.restcloud.framework.core.util.db.rdb.*;\r\nimport java.util.*;\r\n\r\n/**\r\n作为规则节点运行时,返回0表示终止流程运行,返回1表示成功流程可继续运行\r\n节点规则时indoc为上一节点流入数据,其他规则为行数据\r\nfieldId为绑定的字段Id,如果是节点则则为空\r\nparams为绑定规则时填写的传入的参数\r\n姓名\r\n2022-03-26 11:05:29\r\nadmin\r\n*/\r\n\r\npublic class SYS_RULE_01_001 implements IETLBaseEvent {\r\n\r\n\t@Override\r\n\tpublic String execute(IETLBaseProcessEngine engine, Document modelNodeDoc, Document indoc,String fieldId,String params) throws Exception {\r\n\t    String plaintext = DocumentUtil.getString(indoc,fieldId);\r\n        char[] textCharArray = plaintext.toCharArray();\r\n        String resultCode = \"\";\r\n        if(StringUtils.isNotBlank(plaintext)){\r\n            if(textCharArray.length==2){\r\n                resultCode=\"*\"+textCharArray[1];\r\n            }\r\n            else if(textCharArray.length==3){\r\n                resultCode=\"**\"+textCharArray[2];\r\n            }\r\n            else if (textCharArray.length > 3) {\r\n                String star = \"\";\r\n                for (int i = 0; i < textCharArray.length-2; i++) {\r\n                    star=star+\"*\";\r\n                }\r\n                resultCode = textCharArray[0]+star+textCharArray[textCharArray.length-1];\r\n            }\r\n            indoc.put(fieldId,resultCode);\r\n        }\r\n\t\treturn \"1\";\r\n\t}\r\n\r\n}\r\n","ruleId":"sys_rule_01_001","ruleName":"姓名脱敏","system":"1"},{"appId":"etl","applicationId":"home","categoryId":"sys_rule_01","classPath":"","createTime":"2022-03-26 11:09:31","creator":"admin","creatorName":"管理员","editor":"admin","editorName":"管理员","editTime":"2022-04-17 23:11:54","example":"4***********9","expireAfterIndexTime":"17/4/2022 08:45:11.799","id":"623e83ebcb19366a8e060a4f","inputParam":"0","paramDes":"","publicType":"1","remark":"只展示前1后1位","ruleCode":"package cn.restcloud.etl.rule.ext;\r\n\r\nimport org.apache.commons.lang3.StringUtils;\r\nimport org.bson.Document;\r\nimport java.sql.Connection;\r\nimport cn.restcloud.framework.core.context.*;\r\nimport cn.restcloud.etl.base.IETLBaseEvent;\r\nimport cn.restcloud.etl.base.IETLBaseProcessEngine;\r\nimport cn.restcloud.framework.core.util.*;\r\nimport cn.restcloud.framework.core.util.db.rdb.*;\r\nimport java.util.*;\r\n\r\n/**\r\n作为规则节点运行时,返回0表示终止流程运行,返回1表示成功流程可继续运行\r\n节点规则时indoc为上一节点流入数据,其他规则为行数据\r\nfieldId为绑定的字段Id,如果是节点则则为空\r\nparams为绑定规则时填写的传入的参数\r\n证件号脱敏\r\n2022-03-26 11:09:31\r\nadmin\r\n*/\r\n\r\npublic class SYS_RULE_01_002 implements IETLBaseEvent {\r\n\r\n\t@Override\r\n\tpublic String execute(IETLBaseProcessEngine engine, Document modelNodeDoc, Document indoc,String fieldId,String params) throws Exception {\r\n\t    String plaintext = DocumentUtil.getString(indoc,fieldId);\r\n\t    String resultCode = \"\";\r\n        if(StringUtils.isNotBlank(plaintext)){\r\n            char[] textCharArray = plaintext.toCharArray();\r\n            String star = \"\";\r\n            for (int i = 0; i < textCharArray.length - 3; i++) {\r\n                star = star + \"*\";\r\n            }\r\n            resultCode = textCharArray[0] + star + textCharArray[textCharArray.length - 1];\r\n            indoc.put(fieldId,resultCode);\r\n        }\r\n        return \"1\";\r\n\t}\r\n\r\n}\r\n","ruleId":"sys_rule_01_002","ruleName":"证件号脱敏","system":"1"},{"appId":"etl","applicationId":"home","categoryId":"sys_rule_01","classPath":"","createTime":"2022-03-26 11:10:24","creator":"admin","creatorName":"管理员","editor":"admin","editorName":"管理员","editTime":"2022-04-17 23:11:54","example":"************1234","expireAfterIndexTime":"17/4/2022 08:45:08.533","id":"623e8420cb19366a8e060ad2","inputParam":"0","paramDes":"","publicType":"1","remark":"只展示后4位","ruleCode":"package cn.restcloud.etl.rule.ext;\r\n\r\nimport org.apache.commons.lang3.StringUtils;\r\nimport org.bson.Document;\r\nimport java.sql.Connection;\r\nimport cn.restcloud.framework.core.context.*;\r\nimport cn.restcloud.etl.base.IETLBaseEvent;\r\nimport cn.restcloud.etl.base.IETLBaseProcessEngine;\r\nimport cn.restcloud.framework.core.util.*;\r\nimport cn.restcloud.framework.core.util.db.rdb.*;\r\nimport java.util.*;\r\n\r\n/**\r\n作为规则节点运行时,返回0表示终止流程运行,返回1表示成功流程可继续运行\r\n节点规则时indoc为上一节点流入数据,其他规则为行数据\r\nfieldId为绑定的字段Id,如果是节点则则为空\r\nparams为绑定规则时填写的传入的参数\r\n卡号脱敏\r\n2022-03-26 11:10:24\r\nadmin\r\n*/\r\n\r\npublic class SYS_RULE_01_003 implements IETLBaseEvent {\r\n\r\n\t@Override\r\n\tpublic String execute(IETLBaseProcessEngine engine, Document modelNodeDoc, Document indoc,String fieldId,String params) throws Exception {\r\n\t    String plaintext = DocumentUtil.getString(indoc,fieldId);\r\n\t    String resultCode = \"\";\r\n\t    if(StringUtils.isNotBlank(plaintext)){\r\n\t        char[] textCharArray = plaintext.toCharArray();\r\n\t        for (int i = 0; i < textCharArray.length - 4; i++) {\r\n                resultCode += \"*\";\r\n            }\r\n            for (int i = textCharArray.length-4; i < textCharArray.length; i++) {\r\n                resultCode += textCharArray[i];\r\n            }\r\n            indoc.put(fieldId,resultCode);\r\n\t    }\r\n\t\treturn \"1\";\r\n\t}\r\n\r\n}\r\n","ruleId":"sys_rule_01_003","ruleName":"卡号脱敏","system":"1"},{"appId":"etl","applicationId":"home","categoryId":"sys_rule_01","classPath":"cn.restcloud.etl.rule.ext.SYS_RULE_01_004","createTime":"2022-03-26 11:10:53","creator":"admin","creatorName":"管理员","editor":"admin","editorName":"管理员","editTime":"2022-04-17 23:11:54","example":"139****1234","expireAfterIndexTime":"17/4/2022 09:54:59.438","id":"623e843dcb19366a8e060b2d","inputParam":"0","paramDes":"","publicType":"1","remark":"只展示前3后4位","ruleCode":"package cn.restcloud.etl.rule.ext;\r\n\r\nimport org.apache.commons.lang3.StringUtils;\r\nimport org.bson.Document;\r\nimport java.sql.Connection;\r\nimport cn.restcloud.framework.core.context.*;\r\nimport cn.restcloud.etl.base.IETLBaseEvent;\r\nimport cn.restcloud.etl.base.IETLBaseProcessEngine;\r\nimport cn.restcloud.framework.core.util.*;\r\nimport cn.restcloud.framework.core.util.db.rdb.*;\r\nimport java.util.*;\r\n\r\n/**\r\n作为规则节点运行时,返回0表示终止流程运行,返回1表示成功流程可继续运行\r\n节点规则时indoc为上一节点流入数据,其他规则为行数据\r\nfieldId为绑定的字段Id,如果是节点则则为空\r\nparams为绑定规则时填写的传入的参数\r\n手机号脱敏\r\n2022-03-26 11:10:53\r\nadmin\r\n*/\r\n\r\npublic class SYS_RULE_01_004 implements IETLBaseEvent {\r\n\r\n\t@Override\r\n\tpublic String execute(IETLBaseProcessEngine engine, Document modelNodeDoc, Document indoc,String fieldId,String params) throws Exception {\r\n\t    String plaintext = DocumentUtil.getString(indoc,fieldId);\r\n\t    String resultCode = \"\";\r\n        if(StringUtils.isNotBlank(plaintext)){\r\n            char[] textCharArray = plaintext.toCharArray();\r\n            for (int i = 0; i < 3; i++) {\r\n                resultCode += textCharArray[i];\r\n            }\r\n            for(int i=3;i<textCharArray.length-4;i++){\r\n                resultCode += \"*\";\r\n            }\r\n            for (int i = textCharArray.length-4; i < textCharArray.length; i++) {\r\n                resultCode += textCharArray[i];\r\n            }\r\n            indoc.put(fieldId,resultCode);\r\n        }\r\n\t\treturn \"1\";\r\n\t}\r\n\r\n}\r\n","ruleId":"sys_rule_01_004","ruleName":"手机号脱敏","system":"1"},{"appId":"etl","applicationId":"home","categoryId":"sys_rule_01","classPath":"","createTime":"2022-03-26 11:11:11","creator":"admin","creatorName":"管理员","editor":"admin","editorName":"管理员","editTime":"2022-04-17 23:11:54","example":"hb****@qq.com","expireAfterIndexTime":"17/4/2022 09:15:27.057","id":"623e844fcb19366a8e060b6d","inputParam":"0","paramDes":"","publicType":"1","remark":"前2位及@后全部","ruleCode":"package cn.restcloud.etl.rule.ext;\r\n\r\nimport org.apache.commons.lang3.StringUtils;\r\nimport org.bson.Document;\r\nimport java.sql.Connection;\r\nimport cn.restcloud.framework.core.context.*;\r\nimport cn.restcloud.etl.base.IETLBaseEvent;\r\nimport cn.restcloud.etl.base.IETLBaseProcessEngine;\r\nimport cn.restcloud.framework.core.util.*;\r\nimport cn.restcloud.framework.core.util.db.rdb.*;\r\nimport java.util.*;\r\n\r\n/**\r\n作为规则节点运行时,返回0表示终止流程运行,返回1表示成功流程可继续运行\r\n节点规则时indoc为上一节点流入数据,其他规则为行数据\r\nfieldId为绑定的字段Id,如果是节点则则为空\r\nparams为绑定规则时填写的传入的参数\r\n邮箱脱敏\r\n2022-03-26 11:11:11\r\nadmin\r\n*/\r\n\r\npublic class SYS_RULE_01_005 implements IETLBaseEvent {\r\n\r\n\t@Override\r\n\tpublic String execute(IETLBaseProcessEngine engine, Document modelNodeDoc, Document indoc,String fieldId,String params) throws Exception {\r\n\t    String plaintext = DocumentUtil.getString(indoc,fieldId);\r\n\t    String resultCode = \"\";\r\n        if(StringUtils.isNotBlank(plaintext)){\r\n            char[] textCharArray = plaintext.toCharArray();\r\n            for (int i = 0; i < 2; i++) {\r\n                resultCode += textCharArray[i];\r\n            }\r\n            for(int i=2;i<textCharArray.length;i++){\r\n                if(textCharArray[i]=='@'){\r\n                    for(int j=i;j<textCharArray.length;j++){\r\n                        resultCode += textCharArray[j];\r\n                    }\r\n                    break;\r\n                }else {\r\n                    resultCode += \"*\";\r\n                }\r\n            }\r\n            indoc.put(fieldId,resultCode);\r\n        }\r\n\t\treturn \"1\";\r\n\t}\r\n\r\n}\r\n","ruleId":"sys_rule_01_005","ruleName":"邮箱脱敏","system":"1"},{"appId":"etl","applicationId":"home","categoryId":"sys_rule_01","classPath":"","createTime":"2022-03-26 11:11:40","creator":"admin","creatorName":"管理员","editor":"admin","editorName":"管理员","editTime":"2022-04-17 23:11:54","example":"广州市天河全*********","expireAfterIndexTime":"17/4/2022 09:15:24.338","id":"623e846ccb19366a8e060be0","inputParam":"0","paramDes":"","publicType":"1","remark":"隐藏区/县以下部分","ruleCode":"package cn.restcloud.etl.rule.ext;\r\n\r\nimport org.apache.commons.lang3.StringUtils;\r\nimport org.bson.Document;\r\nimport java.sql.Connection;\r\nimport cn.restcloud.framework.core.context.*;\r\nimport cn.restcloud.etl.base.IETLBaseEvent;\r\nimport cn.restcloud.etl.base.IETLBaseProcessEngine;\r\nimport cn.restcloud.framework.core.util.*;\r\nimport cn.restcloud.framework.core.util.db.rdb.*;\r\nimport java.util.*;\r\n\r\n/**\r\n作为规则节点运行时,返回0表示终止流程运行,返回1表示成功流程可继续运行\r\n节点规则时indoc为上一节点流入数据,其他规则为行数据\r\nfieldId为绑定的字段Id,如果是节点则则为空\r\nparams为绑定规则时填写的传入的参数\r\n地址信息脱敏\r\n2022-03-26 11:11:40\r\nadmin\r\n*/\r\n\r\npublic class SYS_RULE_01_006 implements IETLBaseEvent {\r\n\r\n\t@Override\r\n\tpublic String execute(IETLBaseProcessEngine engine, Document modelNodeDoc, Document indoc,String fieldId,String params) throws Exception {\r\n\t    String plaintext = DocumentUtil.getString(indoc,fieldId);\r\n\t    String resultCode = \"\";\r\n        if(StringUtils.isNotBlank(plaintext)){\r\n            char[] textCharArray = plaintext.toCharArray();\r\n            for(int i=0;i<textCharArray.length;i++){\r\n                resultCode += textCharArray[i];\r\n                if(textCharArray[i]=='区'||textCharArray[i]=='县'){\r\n                    for(int j=i;j<textCharArray.length;j++){\r\n                        resultCode += \"*\";\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n            indoc.put(fieldId,resultCode);\r\n        }\r\n\t\treturn \"1\";\r\n\t}\r\n\r\n}\r\n","ruleId":"sys_rule_01_006","ruleName":"地址信息脱敏","system":"1"},{"appId":"etl","applicationId":"home","categoryId":"sys_rule_01","classPath":"","createTime":"2022-03-26 11:12:05","creator":"admin","creatorName":"管理员","editor":"admin","editorName":"管理员","editTime":"2022-04-17 23:11:54","example":"粤A**678","expireAfterIndexTime":"17/4/2022 09:15:21.217","id":"623e8485cb19366a8e060c35","inputParam":"0","paramDes":"","publicType":"1","remark":"只展示前2后3位","ruleCode":"package cn.restcloud.etl.rule.ext;\r\n\r\nimport org.apache.commons.lang3.StringUtils;\r\nimport org.bson.Document;\r\nimport java.sql.Connection;\r\nimport cn.restcloud.framework.core.context.*;\r\nimport cn.restcloud.etl.base.IETLBaseEvent;\r\nimport cn.restcloud.etl.base.IETLBaseProcessEngine;\r\nimport cn.restcloud.framework.core.util.*;\r\nimport cn.restcloud.framework.core.util.db.rdb.*;\r\nimport java.util.*;\r\n\r\n/**\r\n作为规则节点运行时,返回0表示终止流程运行,返回1表示成功流程可继续运行\r\n节点规则时indoc为上一节点流入数据,其他规则为行数据\r\nfieldId为绑定的字段Id,如果是节点则则为空\r\nparams为绑定规则时填写的传入的参数\r\n车牌号脱敏\r\n2022-03-26 11:12:05\r\nadmin\r\n*/\r\n\r\npublic class SYS_RULE_01_007 implements IETLBaseEvent {\r\n\r\n\t@Override\r\n\tpublic String execute(IETLBaseProcessEngine engine, Document modelNodeDoc, Document indoc,String fieldId,String params) throws Exception {\r\n\t    String plaintext = DocumentUtil.getString(indoc,fieldId);\r\n\t    String resultCode = \"\";\r\n        if(StringUtils.isNotBlank(plaintext)){\r\n            char[] textCharArray = plaintext.toCharArray();\r\n            for (int i = 0; i < 2; i++) {\r\n                resultCode += textCharArray[i];\r\n            }\r\n            for(int i=2;i<textCharArray.length-3;i++){\r\n                resultCode += \"*\";\r\n            }\r\n            for (int i = textCharArray.length-3; i < textCharArray.length; i++) {\r\n                resultCode += textCharArray[i];\r\n            }\r\n            indoc.put(fieldId,resultCode);\r\n        }\r\n\t\treturn \"1\";\r\n\t}\r\n\r\n}\r\n","ruleId":"sys_rule_01_007","ruleName":"车牌号脱敏","system":"1"},{"appId":"etl","applicationId":"home","categoryId":"sys_rule_03","classPath":"cn.restcloud.etl.rule.ext.SYS_RULE_03_000","createTime":"2022-03-26 11:14:59","creator":"admin","creatorName":"管理员","editor":"admin","editorName":"管理员","editTime":"2022-04-17 23:11:54","example":"20220317","expireAfterIndexTime":"17/4/2022 13:33:22.406","id":"623e8533cb19366a8e060e83","inputParam":"1","paramDes":"[{\"id\":0,\"EditFlag\":true,\"fieldType\":\"string\",\"breakFlag\":true,\"required\":true,\"in\":\"query\",\"defaultValue\":\"\",\"maxLength\":\"0\",\"minLength\":\"0\",\"order\":1,\"fieldId\":\"fromFormat\",\"fieldName\":\"当前日期格式\"},{\"id\":1,\"EditFlag\":true,\"fieldType\":\"string\",\"breakFlag\":true,\"required\":true,\"in\":\"query\",\"defaultValue\":\"\",\"maxLength\":\"0\",\"minLength\":\"0\",\"order\":2,\"fieldId\":\"toFormat\",\"fieldName\":\"要转换的日期格式\"}]","publicType":"1","remark":"自定义格式，参数  yyyymmdd 日期转字符，参数 字符转日期，参数","ruleCode":"package cn.restcloud.etl.rule.ext;\r\n\r\nimport org.apache.commons.lang3.StringUtils;\r\nimport org.bson.Document;\r\nimport java.sql.Connection;\r\nimport cn.restcloud.framework.core.context.*;\r\nimport cn.restcloud.etl.base.IETLBaseEvent;\r\nimport cn.restcloud.etl.base.IETLBaseProcessEngine;\r\nimport cn.restcloud.framework.core.util.*;\r\nimport cn.restcloud.framework.core.util.db.rdb.*;\r\nimport java.util.*;\r\nimport com.alibaba.fastjson.JSONObject;\r\nimport java.text.ParseException;\r\nimport java.text.SimpleDateFormat;\r\nimport java.time.LocalDateTime;\r\nimport java.time.format.DateTimeFormatter;\r\nimport java.util.Date;\r\n\r\n/**\r\n作为规则节点运行时,返回0表示终止流程运行,返回1表示成功流程可继续运行\r\n节点规则时indoc为上一节点流入数据,其他规则为行数据\r\nfieldId为绑定的字段Id,如果是节点则则为空\r\nparams为绑定规则时填写的传入的参数\r\n日期格式化\r\n2022-03-26 11:14:59\r\nadmin\r\n*/\r\n\r\npublic class SYS_RULE_03_000 implements IETLBaseEvent {\r\n\r\n\t@Override\r\n\tpublic String execute(IETLBaseProcessEngine engine, Document modelNodeDoc, Document indoc,String fieldId,String params) throws Exception {\r\n\t    String date = DocumentUtil.getString(indoc,fieldId);\r\n\t   \r\n\t    JSONObject obj = JSONObject.parseObject(params);\r\n\t     String parseFormat = obj.getString(\"fromFormat\");//格式化规则\r\n        String format = obj.getString(\"toFormat\");//格式化规则\r\n        String formatDate = new String();\r\n        if(StringUtils.isNotBlank(date)){\r\n            Date dateTime = new SimpleDateFormat(parseFormat).parse(date);\r\n            formatDate = new SimpleDateFormat(format).format(dateTime);\r\n            indoc.put(fieldId,formatDate);\r\n        }\r\n        \r\n\t\treturn \"1\";\r\n\t}\r\n\r\n}\r\n","ruleId":"sys_rule_03_000","ruleName":"日期格式化","system":"1"},{"appId":"etl","applicationId":"home","categoryId":"sys_rule_03","classPath":"cn.restcloud.etl.rule.ext.SYS_RULE_03_001","createTime":"2022-03-26 11:15:19","creator":"admin","creatorName":"管理员","editor":"admin","editorName":"管理员","editTime":"2022-04-17 23:11:54","example":"","expireAfterIndexTime":"17/4/2022 14:59:13.27","id":"623e8547cb19366a8e060eb2","inputParam":"0","paramDes":"","publicType":"1","remark":"清除所有空格符","ruleCode":"package cn.restcloud.etl.rule.ext;\r\n\r\nimport org.apache.commons.lang3.StringUtils;\r\nimport org.bson.Document;\r\nimport java.sql.Connection;\r\nimport cn.restcloud.framework.core.context.*;\r\nimport cn.restcloud.etl.base.IETLBaseEvent;\r\nimport cn.restcloud.etl.base.IETLBaseProcessEngine;\r\nimport cn.restcloud.framework.core.util.*;\r\nimport cn.restcloud.framework.core.util.db.rdb.*;\r\nimport java.util.*;\r\n\r\n/**\r\n作为规则节点运行时,返回0表示终止流程运行,返回1表示成功流程可继续运行\r\n节点规则时indoc为上一节点流入数据,其他规则为行数据\r\nfieldId为绑定的字段Id,如果是节点则则为空\r\nparams为绑定规则时填写的传入的参数\r\n清除空格符\r\n2022-03-26 11:15:19\r\nadmin\r\n*/\r\n\r\npublic class SYS_RULE_03_001 implements IETLBaseEvent {\r\n\r\n\t@Override\r\n\tpublic String execute(IETLBaseProcessEngine engine, Document modelNodeDoc, Document indoc,String fieldId,String params) throws Exception {\r\n\t    String plaintext = DocumentUtil.getString(indoc,fieldId);\r\n\t    if(StringUtils.isNotBlank(plaintext)){\r\n    \t    plaintext = plaintext.replace(\" \",\"\");//去除空格\r\n    \t    indoc.put(fieldId,plaintext);\r\n\t    }\r\n        return \"1\";\r\n\t}\r\n\r\n}\r\n","ruleId":"sys_rule_03_001","ruleName":"清除空格符","system":"1"},{"appId":"etl","applicationId":"home","categoryId":"sys_rule_03","classPath":"cn.restcloud.etl.rule.ext.SYS_RULE_03_002","createTime":"2022-03-26 11:15:39","creator":"admin","creatorName":"管理员","editor":"admin","editorName":"管理员","editTime":"2022-04-17 23:11:54","example":"截取前N位 参数 3, 328932 截取后N位 参数 3, 328932 截取第N位，长度X，参数2,3 截取字符前字符参数 A, 32A932 截取字符后字符","expireAfterIndexTime":"17/4/2022 14:59:21.362","id":"623e855bcb19366a8e060f00","inputParam":"1","paramDes":"[{\"id\":0,\"EditFlag\":true,\"fieldType\":\"string\",\"breakFlag\":true,\"required\":true,\"in\":\"query\",\"defaultValue\":\"\",\"maxLength\":\"0\",\"minLength\":\"0\",\"order\":1,\"fieldId\":\"rule\"},{\"id\":1,\"EditFlag\":true,\"fieldType\":\"string\",\"breakFlag\":true,\"required\":false,\"in\":\"query\",\"defaultValue\":\"\",\"maxLength\":\"0\",\"minLength\":\"0\",\"order\":2,\"fieldId\":\"index\"},{\"id\":2,\"EditFlag\":true,\"fieldType\":\"string\",\"breakFlag\":true,\"required\":false,\"in\":\"query\",\"defaultValue\":\"\",\"maxLength\":\"0\",\"minLength\":\"0\",\"order\":3,\"fieldId\":\"length\"},{\"id\":3,\"EditFlag\":true,\"fieldType\":\"string\",\"breakFlag\":true,\"required\":false,\"in\":\"query\",\"defaultValue\":\"\",\"maxLength\":\"0\",\"minLength\":\"0\",\"order\":4,\"fieldId\":\"num\"},{\"id\":4,\"EditFlag\":true,\"fieldType\":\"string\",\"breakFlag\":true,\"required\":false,\"in\":\"query\",\"defaultValue\":\"\",\"maxLength\":\"0\",\"minLength\":\"0\",\"order\":5,\"fieldId\":\"char\"}]","publicType":"1","remark":"rule为front 截取前N位 传num;rule为after 截取后N位 传num;rule为index 截取第N位 传index和长度length;rule为beforeChar 截取字符前字符 传char;rule为afterChar 截取字符后字符 传char;","ruleCode":"package cn.restcloud.etl.rule.ext;\r\n\r\nimport org.apache.commons.lang3.StringUtils;\r\nimport org.bson.Document;\r\nimport java.sql.Connection;\r\nimport cn.restcloud.framework.core.context.*;\r\nimport cn.restcloud.etl.base.IETLBaseEvent;\r\nimport cn.restcloud.etl.base.IETLBaseProcessEngine;\r\nimport cn.restcloud.framework.core.util.*;\r\nimport cn.restcloud.framework.core.util.db.rdb.*;\r\nimport java.util.*;\r\nimport com.alibaba.fastjson.JSONObject;\r\n\r\n/**\r\n作为规则节点运行时,返回0表示终止流程运行,返回1表示成功流程可继续运行\r\n节点规则时indoc为上一节点流入数据,其他规则为行数据\r\nfieldId为绑定的字段Id,如果是节点则则为空\r\nparams为绑定规则时填写的传入的参数\r\n字符串截取\r\n2022-03-26 11:15:39\r\nadmin\r\n*/\r\n\r\npublic class SYS_RULE_03_002 implements IETLBaseEvent {\r\n\r\n\t@Override\r\n\tpublic String execute(IETLBaseProcessEngine engine, Document modelNodeDoc, Document indoc,String fieldId,String params) throws Exception {\r\n\t    String str = DocumentUtil.getString(indoc,fieldId);\r\n\t    JSONObject obj = JSONObject.parseObject(params);\r\n\r\n\t    if(StringUtils.isNotBlank(str)){\r\n    \t    String rule = obj.getString(\"rule\");//获取截取规则\r\n            Integer index = obj.getInteger(\"index\");\r\n            Integer length = obj.getInteger(\"length\");\r\n            Integer num = obj.getInteger(\"num\");\r\n            String c = obj.getString(\"char\");\r\n\r\n            if (rule.equals(\"front\")) {//截取前N位 num\r\n                str = str.substring(0, num);\r\n            }else if (rule.equals(\"after\")){//截取后N位 num\r\n                str = str.substring(str.length() - num);\r\n            }else if (rule.equals(\"index\")){//截取第N位，长度X index length\r\n                str = str.substring(index + 1,index + 1 +length);\r\n            }else if (rule.equals(\"beforeChar\")){//截取字符前字符 char\r\n                int i = str.indexOf(c);\r\n                str = str.substring(0,i);\r\n            }else if (rule.equals(\"afterChar\")){//截取字符后字符 char\r\n                int i = str.indexOf(c);\r\n                if (i != -1) {\r\n                    str = str.substring(i + 1);\r\n                }\r\n            }\r\n            indoc.put(fieldId,str);\r\n\t    }\r\n        \r\n\t\treturn \"1\";\r\n\t}\r\n\r\n}\r\n","ruleId":"sys_rule_03_002","ruleName":"字符串截取","system":"1"},{"appId":"etl","applicationId":"home","categoryId":"sys_rule_02","classPath":"cn.restcloud.etl.rule.ext.SYS_RULE_03_004","createTime":"2022-03-26 11:18:07","creator":"admin","creatorName":"管理员","editor":"admin","editorName":"管理员","editTime":"2022-04-17 23:11:54","example":"如字符串  abcd   sourceChar=b    newChar=l  结果输出为:alcd ","expireAfterIndexTime":"17/4/2022 10:34:31.464","id":"623e85efcb19366a8e061014","inputParam":"1","paramDes":"[{\"id\":0,\"EditFlag\":true,\"fieldType\":\"string\",\"breakFlag\":true,\"required\":true,\"in\":\"query\",\"defaultValue\":\"\",\"maxLength\":\"0\",\"minLength\":\"0\",\"order\":1,\"fieldId\":\"sourceChar\",\"fieldName\":\"替换原字符\"},{\"id\":1,\"EditFlag\":true,\"fieldType\":\"string\",\"breakFlag\":true,\"required\":true,\"in\":\"query\",\"defaultValue\":\"\",\"maxLength\":\"0\",\"minLength\":\"0\",\"order\":2,\"fieldId\":\"newChar\",\"fieldName\":\"替换新字符\"}]","publicType":"1","remark":"替换字符为设定字符","ruleCode":"package cn.restcloud.etl.rule.ext;\r\n\r\nimport org.apache.commons.lang3.StringUtils;\r\nimport org.bson.Document;\r\nimport java.sql.Connection;\r\nimport cn.restcloud.framework.core.context.*;\r\nimport cn.restcloud.etl.base.IETLBaseEvent;\r\nimport cn.restcloud.etl.base.IETLBaseProcessEngine;\r\nimport cn.restcloud.framework.core.util.*;\r\nimport cn.restcloud.framework.core.util.db.rdb.*;\r\nimport java.util.*;\r\nimport com.alibaba.fastjson.JSONObject;\r\n\r\n/**\r\n作为规则节点运行时,返回0表示终止流程运行,返回1表示成功流程可继续运行\r\n节点规则时indoc为上一节点流入数据,其他规则为行数据\r\nfieldId为绑定的字段Id,如果是节点则则为空\r\nparams为绑定规则时填写的传入的参数\r\n字符替换\r\n2022-03-26 11:18:07\r\nadmin\r\n*/\r\n\r\npublic class SYS_RULE_03_004 implements IETLBaseEvent {\r\n\r\n\t@Override\r\n\tpublic String execute(IETLBaseProcessEngine engine, Document modelNodeDoc, Document indoc,String fieldId,String params) throws Exception {\r\n\t    JSONObject obj = JSONObject.parseObject(params);\r\n\t    String plaintext = DocumentUtil.getString(indoc,fieldId);\r\n        if(StringUtils.isNotBlank(plaintext)){\r\n            String sourceChar = obj.getString(\"sourceChar\");//原字符串\r\n            String newChar = obj.getString(\"newChar\");//新字符串\r\n\t        plaintext = plaintext.replace(sourceChar,newChar);//替换\r\n\t        indoc.put(fieldId,plaintext);\r\n        }\r\n\t\treturn \"1\";\r\n\t}\r\n\r\n}\r\n","ruleId":"sys_rule_03_003","ruleName":"字符替换","system":"1"},{"appId":"etl","applicationId":"home","categoryId":"sys_rule_03","classPath":"cn.restcloud.etl.rule.ext.sys_rule_03_004","createTime":"2022-03-26 11:18:26","creator":"admin","creatorName":"管理员","editor":"admin","editorName":"管理员","editTime":"2022-04-17 23:11:54","example":"","expireAfterIndexTime":"17/4/2022 14:59:29.917","id":"623e8602cb19366a8e06105a","inputParam":"0","paramDes":"","publicType":"1","remark":"金额数字转大写数字","ruleCode":"package cn.restcloud.etl.rule.ext;\r\n\r\nimport org.apache.commons.lang3.StringUtils;\r\nimport org.bson.Document;\r\nimport java.sql.Connection;\r\nimport cn.restcloud.framework.core.context.*;\r\nimport cn.restcloud.etl.base.IETLBaseEvent;\r\nimport cn.restcloud.etl.base.IETLBaseProcessEngine;\r\nimport cn.restcloud.framework.core.util.*;\r\nimport cn.restcloud.framework.core.util.db.rdb.*;\r\nimport java.util.*;\r\n\r\n/**\r\n作为规则节点运行时,返回0表示终止流程运行,返回1表示成功流程可继续运行\r\n节点规则时indoc为上一节点流入数据,其他规则为行数据\r\nfieldId为绑定的字段Id,如果是节点则则为空\r\nparams为绑定规则时填写的传入的参数\r\n金额转大写\r\n2022-03-26 11:18:26\r\nadmin\r\n*/\r\n\r\npublic class sys_rule_03_004 implements IETLBaseEvent {\r\n\r\n\t@Override\r\n\tpublic String execute(IETLBaseProcessEngine engine, Document modelNodeDoc, Document indoc,String fieldId,String params) throws Exception {\r\n\t    Double money = DocumentUtil.getDouble(indoc,fieldId);\r\n\t    String result = \"\";\r\n    \t    String[] fraction = { \"角\", \"分\" };\r\n            String[] digit = { \"零\", \"壹\", \"贰\", \"叁\", \"肆\", \"伍\", \"陆\", \"柒\", \"捌\", \"玖\" };\r\n            String[][] unit = { { \"元\", \"万\", \"亿\" }, { \"\", \"拾\", \"佰\", \"仟\" } };\r\n    \r\n            String head = money < 0 ? \"负\" : \"\";\r\n            money = Math.abs(money);\r\n    \r\n            String s = \"\";\r\n            for (int i = 0; i < fraction.length; i++)\r\n            {\r\n                s += (digit[(int) (Math.floor(money * 10 * Math.pow(10, i)) % 10)] + fraction[i]).replaceAll(\"(零.)+\", \"\");\r\n            }\r\n            if (s.length() < 1)\r\n            {\r\n                s = \"整\";\r\n            }\r\n            int integerPart = (int) Math.floor(money);\r\n    \r\n            for (int i = 0; i < unit[0].length && integerPart > 0; i++)\r\n            {\r\n                String p = \"\";\r\n                for (int j = 0; j < unit[1].length && money > 0; j++)\r\n                {\r\n                    p = digit[integerPart % 10] + unit[1][j] + p;\r\n                    integerPart = integerPart / 10;\r\n                }\r\n                s = p.replaceAll(\"(零.)*零$\", \"\").replaceAll(\"^$\", \"零\") + unit[0][i] + s;\r\n            }\r\n            //result = head + s.replaceAll(\"(零.)*零元\", \"元\").replaceFirst(\"(零.)+\", \"\").replaceAll(\"(零.)+\", \"零\").replaceAll(\"^整$\", \"零元整\");\r\n            indoc.put(fieldId,head + s.replaceAll(\"(零.)*零元\", \"元\").replaceFirst(\"(零.)+\", \"\").replaceAll(\"(零.)+\", \"零\").replaceAll(\"^整$\", \"零元整\"));\r\n\t    \r\n\t\treturn \"1\";\r\n\t}\r\n\r\n}\r\n","ruleId":"sys_rule_03_004","ruleName":"金额转大写","system":"1"},{"appId":"etl","applicationId":"home","categoryId":"sys_rule_03","classPath":"cn.restcloud.etl.rule.ext.SYS_RULE_03_005","createTime":"2022-03-26 11:18:41","creator":"admin","creatorName":"管理员","editor":"admin","editorName":"管理员","editTime":"2022-04-17 23:11:54","example":"字符串为ABC时，转换成abc ，字符串为abc时，转换成ABC ","expireAfterIndexTime":"17/4/2022 14:59:36.635","id":"623e8611cb19366a8e061171","inputParam":"0","paramDes":"","publicType":"1","remark":"字母小写转大写，abc 字母大写转小写","ruleCode":"package cn.restcloud.etl.rule.ext;\r\n\r\nimport org.apache.commons.lang3.StringUtils;\r\nimport org.bson.Document;\r\nimport java.sql.Connection;\r\nimport cn.restcloud.framework.core.context.*;\r\nimport cn.restcloud.etl.base.IETLBaseEvent;\r\nimport cn.restcloud.etl.base.IETLBaseProcessEngine;\r\nimport cn.restcloud.framework.core.util.*;\r\nimport cn.restcloud.framework.core.util.db.rdb.*;\r\nimport java.util.*;\r\n\r\n/**\r\n作为规则节点运行时,返回0表示终止流程运行,返回1表示成功流程可继续运行\r\n节点规则时indoc为上一节点流入数据,其他规则为行数据\r\nfieldId为绑定的字段Id,如果是节点则则为空\r\nparams为绑定规则时填写的传入的参数\r\n字母大小写转换\r\n2022-03-26 11:18:41\r\nadmin\r\n*/\r\n\r\npublic class SYS_RULE_03_005 implements IETLBaseEvent {\r\n\r\n\t@Override\r\n\tpublic String execute(IETLBaseProcessEngine engine, Document modelNodeDoc, Document indoc,String fieldId,String params) throws Exception {\r\n\t    String plaintext = DocumentUtil.getString(indoc,fieldId);\r\n        if(StringUtils.isNotBlank(plaintext)){\r\n             Boolean b = false;\r\n            for (int i = 0; i < plaintext.length(); i++) {\r\n                if (Character.isLowerCase(plaintext.charAt(i))) {\r\n                    b = true;\r\n                }\r\n            }\r\n            if (b) {\r\n                plaintext = plaintext.toUpperCase();//字符串转大写\r\n            }else {\r\n                plaintext = plaintext.toLowerCase();//字符串转小写\r\n            }\r\n            indoc.put(fieldId,plaintext);\r\n        }\r\n\t\treturn \"1\";\r\n\t}\r\n\r\n}\r\n","ruleId":"sys_rule_03_005","ruleName":"字母大小写转换","system":"1"},{"appId":"etl","applicationId":"home","categoryId":"sys_rule_04","classPath":"cn.restcloud.etl.rule.ext.SYS_RULE_04_000","createTime":"2022-03-26 11:18:57","creator":"admin","creatorName":"管理员","editor":"admin","editorName":"管理员","editTime":"2022-04-17 23:11:54","example":"","expireAfterIndexTime":"17/4/2022 11:26:25.347","id":"623e8621cb19366a8e0611b6","inputParam":"1","paramDes":"[{\"id\":1,\"EditFlag\":true,\"fieldType\":\"string\",\"breakFlag\":true,\"required\":true,\"in\":\"query\",\"defaultValue\":\"\",\"maxLength\":\"0\",\"minLength\":\"0\",\"order\":1,\"fieldId\":\"length\",\"fieldName\":\"随机数的 长度\"}]","publicType":"1","remark":"自定义随机数位数，如参数4","ruleCode":"package cn.restcloud.etl.rule.ext;\r\n\r\nimport org.apache.commons.lang3.StringUtils;\r\nimport org.bson.Document;\r\nimport java.sql.Connection;\r\nimport cn.restcloud.framework.core.context.*;\r\nimport cn.restcloud.etl.base.IETLBaseEvent;\r\nimport cn.restcloud.etl.base.IETLBaseProcessEngine;\r\nimport cn.restcloud.framework.core.util.*;\r\nimport cn.restcloud.framework.core.util.db.rdb.*;\r\nimport java.util.*;\r\nimport com.alibaba.fastjson.JSONObject;\r\nimport java.security.SecureRandom;\r\nimport java.util.Random;\r\n\r\n/**\r\n作为规则节点运行时,返回0表示终止流程运行,返回1表示成功流程可继续运行\r\n节点规则时indoc为上一节点流入数据,其他规则为行数据\r\nfieldId为绑定的字段Id,如果是节点则则为空\r\nparams为绑定规则时填写的传入的参数\r\n生成随机数\r\n2022-03-26 11:18:57\r\nadmin\r\n*/\r\n\r\npublic class SYS_RULE_04_000 implements IETLBaseEvent {\r\n\r\n\t@Override\r\n\tpublic String execute(IETLBaseProcessEngine engine, Document modelNodeDoc, Document indoc,String fieldId,String params) throws Exception {\r\n\t    JSONObject obj = JSONObject.parseObject(params);\r\n\t    Integer num = obj.getInteger(\"length\");//获取长度\r\n\t    String SYMBOLS = \"0123456789\"; // 随机数字范围\r\n        Random RANDOM = new SecureRandom();\r\n\r\n        char[] nonceChars = new char[num]; //指定长度为传入的参数num\r\n\r\n        for (int index = 0; index < nonceChars.length; ++index) {\r\n            nonceChars[index] = SYMBOLS.charAt(RANDOM.nextInt(SYMBOLS.length()));\r\n        }\r\n        String str = new String(nonceChars);\r\n        indoc.put(fieldId,str);\r\n\t\treturn \"1\";\r\n\t}\r\n\r\n}\r\n","ruleId":"sys_rule_04_000","ruleName":"生成随机数","system":"1"},{"appId":"etl","applicationId":"home","categoryId":"sys_rule_04","classPath":"cn.restcloud.etl.rule.ext.SYS_RULE_04_001","createTime":"2022-03-26 11:19:20","creator":"admin","creatorName":"管理员","editor":"admin","editorName":"管理员","editTime":"2022-04-17 23:11:54","example":"","expireAfterIndexTime":"17/4/2022 11:26:10.765","id":"623e8638cb19366a8e06127c","inputParam":"1","paramDes":"[{\"id\":1,\"EditFlag\":true,\"fieldType\":\"string\",\"breakFlag\":true,\"required\":true,\"in\":\"query\",\"defaultValue\":\"\",\"maxLength\":\"0\",\"minLength\":\"0\",\"order\":1,\"fieldId\":\"front\",\"fieldName\":\"前常量\"},{\"id\":2,\"EditFlag\":true,\"fieldType\":\"string\",\"breakFlag\":true,\"required\":true,\"in\":\"query\",\"defaultValue\":\"\",\"maxLength\":\"0\",\"minLength\":\"0\",\"order\":2,\"fieldId\":\"after\",\"fieldName\":\"后常量\"},{\"id\":3,\"EditFlag\":true,\"fieldType\":\"string\",\"breakFlag\":true,\"required\":true,\"in\":\"query\",\"defaultValue\":\"\",\"maxLength\":\"0\",\"minLength\":\"0\",\"order\":3,\"fieldId\":\"num\",\"fieldName\":\"N位随机数\"}]","publicType":"1","remark":"前常量参数 +随机数+后常量参数 abc+3+@qq.com","ruleCode":"package cn.restcloud.etl.rule.ext;\r\n\r\nimport org.apache.commons.lang3.StringUtils;\r\nimport org.bson.Document;\r\nimport java.sql.Connection;\r\nimport cn.restcloud.framework.core.context.*;\r\nimport cn.restcloud.etl.base.IETLBaseEvent;\r\nimport cn.restcloud.etl.base.IETLBaseProcessEngine;\r\nimport cn.restcloud.framework.core.util.*;\r\nimport cn.restcloud.framework.core.util.db.rdb.*;\r\nimport java.util.*;\r\nimport com.alibaba.fastjson.JSONObject;\r\nimport java.security.SecureRandom;\r\nimport java.util.Random;\r\n\r\n/**\r\n作为规则节点运行时,返回0表示终止流程运行,返回1表示成功流程可继续运行\r\n节点规则时indoc为上一节点流入数据,其他规则为行数据\r\nfieldId为绑定的字段Id,如果是节点则则为空\r\nparams为绑定规则时填写的传入的参数\r\n常量加生成随机数\r\n2022-03-26 11:19:20\r\nadmin\r\n*/\r\n\r\npublic class SYS_RULE_04_001 implements IETLBaseEvent {\r\n\r\n\t@Override\r\n\tpublic String execute(IETLBaseProcessEngine engine, Document modelNodeDoc, Document indoc,String fieldId,String params) throws Exception {\r\n\t    JSONObject obj = JSONObject.parseObject(params);\r\n\t    String plaintext = DocumentUtil.getString(indoc,fieldId);\r\n\t    String front = obj.getString(\"front\");//获取前常量参数\r\n        String after = obj.getString(\"after\");//获取后常量参数\r\n        Integer num = obj.getInteger(\"num\");//获取N位随机数\r\n        String SYMBOLS = \"0123456789\"; // 数字和26个字母组成\r\n        Random RANDOM = new SecureRandom();\r\n        //获取指定长度的随机数字\r\n        char[] nonceChars = new char[num];  //指定长度为传入的参数num\r\n        for (int index = 0; index < nonceChars.length; ++index) {\r\n            nonceChars[index] = SYMBOLS.charAt(RANDOM.nextInt(SYMBOLS.length()));\r\n        }\r\n        String number = new String(nonceChars);\r\n        String str = front + number + after;\r\n        indoc.put(fieldId,str);\r\n\t\treturn \"1\";\r\n\t}\r\n\r\n}\r\n","ruleId":"sys_rule_04_001","ruleName":"常量加生成随机数","system":"1"},{"appId":"etl","applicationId":"home","categoryId":"sys_rule_05","classPath":"cn.restcloud.etl.rule.ext.ETL_625c0c5e2d473735ff3c68a9","createTime":"2022-04-17 20:47:26","creator":"admin","creatorName":"管理员","editor":"admin","editorName":"管理员","editTime":"2022-04-17 23:11:54","example":"","expireAfterIndexTime":"17/4/2022 14:37:29.234","id":"625c0c5e2d473735ff3c68ac","inputParam":"0","paramDes":"","publicType":"1","remark":"对数据进行MD5加密","ruleCode":"package cn.restcloud.etl.rule.ext;\r\n\r\nimport org.apache.commons.lang3.StringUtils;\r\nimport org.bson.Document;\r\nimport java.sql.Connection;\r\nimport cn.restcloud.framework.core.context.*;\r\nimport cn.restcloud.etl.base.IETLBaseEvent;\r\nimport cn.restcloud.etl.base.IETLBaseProcessEngine;\r\nimport cn.restcloud.framework.core.util.*;\r\nimport cn.restcloud.framework.core.util.db.rdb.*;\r\nimport java.util.*;\r\n\r\n/**\r\n对数据进行MD5加密\r\n2020-03-31 16:13:05\r\nadmin\r\n*/\r\n\r\npublic class ETL_625c0c5e2d473735ff3c68a9 implements IETLBaseEvent {\r\n\r\n\t@Override\r\n\tpublic String execute(IETLBaseProcessEngine engine, Document modelNodeDoc, Document indoc,String fieldId,String params) throws Exception {\r\n\t\tString value=DocumentUtil.getString(indoc,fieldId);\r\n\t    if(StringUtils.isNotBlank(value)){\r\n\t        indoc.put(fieldId,CommonUtil.md5(value));\r\n\t    }\r\n\t\treturn \"1\";\r\n\t}\r\n\r\n}\r\n","ruleId":"sys_rule_03_006","ruleName":"MD5加密","system":"1"},{"ruleId":"sys_rule_03_007","ruleName":"时间整数转为字符串","ruleCode":"package cn.restcloud.etl.rule.ext;\r\n\r\nimport org.apache.commons.lang3.StringUtils;\r\nimport org.bson.Document;\r\nimport java.sql.Connection;\r\nimport cn.restcloud.framework.core.context.*;\r\nimport cn.restcloud.etl.base.IETLBaseEvent;\r\nimport cn.restcloud.etl.base.IETLBaseProcessEngine;\r\nimport cn.restcloud.framework.core.util.*;\r\nimport cn.restcloud.framework.core.util.db.rdb.*;\r\nimport java.util.*;\r\n\r\n/**\r\n作为规则节点运行时,返回0表示终止流程运行,返回1表示成功流程可继续运行\r\n节点规则时indoc为上一节点流入数据,其他规则为行数据\r\nfieldId为绑定的字段Id,如果是节点则则为空\r\nparams为绑定规则时填写的传入的参数\r\n时间整数转为字符串\r\n2022-04-17 21:37:12\r\nadmin\r\n*/\r\n\r\npublic class SYS_RULE_03_007 implements IETLBaseEvent {\r\n\r\n\t@Override\r\n\tpublic String execute(IETLBaseProcessEngine engine, Document modelNodeDoc, Document indoc,String fieldId,String params) throws Exception {\r\n\t    //获取indoc中的fieldId字段的值\r\n\t    String value=DocumentUtil.getString(indoc,fieldId);\r\n\t    //把值转成long\r\n\t    long longTime = Long.parseLong(value);\r\n\t\tString timeStr=DateTimeUtil.long2dateString(longTime, \"yyyy-MM-dd HH:mm:ss\");\r\n\t\tindoc.put(fieldId,timeStr);\r\n\t\treturn \"1\";\r\n\t}\r\n\r\n}\r\n","categoryId":"sys_rule_03","remark":"取indoc中fieldId的值，时间整数例子(1650524807771)","classPath":"cn.restcloud.etl.rule.ext.SYS_RULE_03_007","publicType":1,"applicationId":"DEMO","system":"1","inputParam":"0","paramDes":"","example":"","id":"625c1808162baf07b8085cde","appId":"etl","createTime":"2022-04-17 21:37:12","creator":"admin","creatorName":"管理员","editTime":"2022-04-21 17:43:36","editor":"admin","editorName":"管理员"},{"appId":"etl","applicationId":"","categoryId":"sys_rule_03","classPath":"cn.restcloud.etl.rule.ext.SYS_RULE_03_008","createTime":"2022-04-17 21:38:02","creator":"admin","creatorName":"管理员","editor":"admin","editorName":"管理员","editTime":"2022-04-17 23:11:54","example":"","expireAfterIndexTime":"17/4/2022 15:01:04.139","id":"625c183a162baf07b8085e92","inputParam":"1","paramDes":"[{\"id\":0,\"EditFlag\":true,\"fieldType\":\"string\",\"breakFlag\":true,\"required\":false,\"in\":\"query\",\"defaultValue\":\"\",\"maxLength\":\"0\",\"minLength\":\"0\",\"order\":1,\"fieldId\":\"converStr\",\"fieldName\":\"替换字符串\"}]","publicType":"1","remark":"替换字符串(需要参数如:ab,aa)","ruleCode":"package cn.restcloud.etl.rule.ext;\r\n\r\nimport org.apache.commons.lang3.StringUtils;\r\nimport org.bson.Document;\r\nimport java.sql.Connection;\r\nimport cn.restcloud.framework.core.context.*;\r\nimport cn.restcloud.etl.base.IETLBaseEvent;\r\nimport cn.restcloud.etl.base.IETLBaseProcessEngine;\r\nimport cn.restcloud.framework.core.util.*;\r\nimport cn.restcloud.framework.core.util.db.rdb.*;\r\nimport java.util.*;\r\nimport com.alibaba.fastjson.JSONObject;\r\n\r\n/**\r\n作为规则节点运行时,返回0表示终止流程运行,返回1表示成功流程可继续运行\r\n节点规则时indoc为上一节点流入数据,其他规则为行数据\r\nfieldId为绑定的字段Id,如果是节点则则为空\r\nparams为绑定规则时填写的传入的参数\r\n替换字符串(需要参数如:ab,aa) \r\n2022-04-17 21:38:02\r\nadmin\r\n*/\r\n\r\npublic class SYS_RULE_03_008 implements IETLBaseEvent {\r\n\r\n\t@Override\r\n\tpublic String execute(IETLBaseProcessEngine engine, Document modelNodeDoc, Document rowdoc,String fieldId,String params) throws Exception {\r\n\t    String value=DocumentUtil.getString(rowdoc,fieldId);\r\n\t    JSONObject obj = JSONObject.parseObject(params);\r\n\t    String  converStr =  obj.getString(\"converStr\");\r\n\t    if(StringUtils.isNotBlank(value)){\r\n\t         String[] paramsArray=StringUtils.split(converStr,\",\");\r\n\t         if(paramsArray.length>1){\r\n\t             value=StringUtils.replace(value,paramsArray[0],paramsArray[1]);\r\n\t             rowdoc.put(fieldId,value);\r\n\t         }else if(paramsArray.length==1){\r\n\t        \t value=StringUtils.replace(value,converStr,\"\"); //替换为空，表示删除此字符\r\n\t             rowdoc.put(fieldId,value);\r\n\t         }else {\r\n\t        \t throw new Exception(\"输入参数错误，参数必须要用逗号分隔如a替换为b时规则参数填为a,b\");\r\n\t         }\r\n\t    }\r\n\t\treturn \"1\";\r\n\t}\r\n\r\n}\r\n","ruleId":"sys_rule_03_008","ruleName":"替换字符串","system":"1"},{"appId":"etl","applicationId":"","categoryId":"sys_rule_03","classPath":"cn.restcloud.etl.rule.ext.SYS_RULE_03_009","createTime":"2022-04-17 21:38:08","creator":"admin","creatorName":"管理员","editor":"admin","editorName":"管理员","editTime":"2022-04-17 23:11:54","example":"","expireAfterIndexTime":"17/4/2022 15:01:23.516","id":"625c1840162baf07b8085ecd","inputParam":"1","paramDes":"[{\"id\":1,\"EditFlag\":true,\"fieldType\":\"string\",\"breakFlag\":true,\"required\":false,\"in\":\"query\",\"defaultValue\":\"\",\"maxLength\":\"0\",\"minLength\":\"0\",\"order\":1,\"fieldId\":\"subIndexStr\",\"fieldName\":\"(需要参数符号如:#)\"}]","publicType":"1","remark":"截取符号之前字符(需要参数符号如:#)","ruleCode":"package cn.restcloud.etl.rule.ext;\r\n\r\nimport org.apache.commons.lang3.StringUtils;\r\nimport org.bson.Document;\r\nimport java.sql.Connection;\r\nimport cn.restcloud.framework.core.context.*;\r\nimport cn.restcloud.etl.base.IETLBaseEvent;\r\nimport cn.restcloud.etl.base.IETLBaseProcessEngine;\r\nimport cn.restcloud.framework.core.util.*;\r\nimport cn.restcloud.framework.core.util.db.rdb.*;\r\nimport java.util.*;\r\nimport com.alibaba.fastjson.JSONObject;\r\n\r\n/**\r\n作为规则节点运行时,返回0表示终止流程运行,返回1表示成功流程可继续运行\r\n节点规则时indoc为上一节点流入数据,其他规则为行数据\r\nfieldId为绑定的字段Id,如果是节点则则为空\r\nparams为绑定规则时填写的传入的参数\r\n截取符号之前字符(需要参数符号如:#) \r\n2022-04-17 21:38:08\r\nadmin\r\n*/\r\n\r\npublic class SYS_RULE_03_009 implements IETLBaseEvent {\r\n\r\n\t@Override\r\n\tpublic String execute(IETLBaseProcessEngine engine, Document modelNodeDoc, Document rowdoc,String fieldId,String params) throws Exception {\r\n\t    JSONObject obj = JSONObject.parseObject(params);\r\n\t    String  subIndexStr =  obj.getString(\"subIndexStr\");\r\n\t    String value=DocumentUtil.getString(rowdoc,fieldId);\r\n\t    if(StringUtils.isNotBlank(subIndexStr)){\r\n\t        value=StringUtils.substringBefore(value,subIndexStr);\r\n\t        rowdoc.put(fieldId,value);\r\n\t    }\r\n\t\treturn \"1\";\r\n\t}\r\n\r\n}\r\n","ruleId":"sys_rule_03_009","ruleName":"截取符号之前字符","system":"1"},{"appId":"etl","applicationId":"","categoryId":"sys_rule_03","classPath":"cn.restcloud.etl.rule.ext.SYS_RULE_03_010","createTime":"2022-04-17 21:38:14","creator":"admin","creatorName":"管理员","editor":"admin","editorName":"管理员","editTime":"2022-04-17 23:11:54","example":"","expireAfterIndexTime":"17/4/2022 15:01:46.227","id":"625c1846162baf07b8085f09","inputParam":"1","paramDes":"[{\"id\":0,\"EditFlag\":true,\"fieldType\":\"string\",\"breakFlag\":true,\"required\":false,\"in\":\"query\",\"defaultValue\":\"\",\"maxLength\":\"0\",\"minLength\":\"0\",\"order\":1,\"fieldName\":\"(需要参数符号如:#)\",\"fieldId\":\"subIndexStr\"}]","publicType":"1","remark":"截取符号之后字符","ruleCode":"package cn.restcloud.etl.rule.ext;\r\n\r\nimport org.apache.commons.lang3.StringUtils;\r\nimport org.bson.Document;\r\nimport java.sql.Connection;\r\nimport cn.restcloud.framework.core.context.*;\r\nimport cn.restcloud.etl.base.IETLBaseEvent;\r\nimport cn.restcloud.etl.base.IETLBaseProcessEngine;\r\nimport cn.restcloud.framework.core.util.*;\r\nimport cn.restcloud.framework.core.util.db.rdb.*;\r\nimport java.util.*;\r\n\r\nimport com.alibaba.fastjson.JSONObject;\r\n\r\n/**\r\n作为规则节点运行时,返回0表示终止流程运行,返回1表示成功流程可继续运行\r\n节点规则时indoc为上一节点流入数据,其他规则为行数据\r\nfieldId为绑定的字段Id,如果是节点则则为空\r\nparams为绑定规则时填写的传入的参数\r\n截取符号之后字符(需要参数符号如:#) \r\n2022-04-17 21:38:14\r\nadmin\r\n*/\r\n\r\npublic class \tSYS_RULE_03_010 implements IETLBaseEvent {\r\n\r\n\t@Override\r\n\tpublic String execute(IETLBaseProcessEngine engine, Document modelNodeDoc, Document rowdoc,String fieldId,String params) throws Exception {\r\n\t    JSONObject obj = JSONObject.parseObject(params);\r\n\t    String  subIndexStr =  obj.getString(\"subIndexStr\");\r\n\t    String value=DocumentUtil.getString(rowdoc,fieldId);\r\n\t    if(StringUtils.isNotBlank(params)){\r\n\t        value=StringUtils.substringAfter(value,subIndexStr);\r\n\t        rowdoc.put(fieldId,value);\r\n\t    }\r\n\t\treturn \"1\";\r\n\t}\r\n\r\n}\r\n","ruleId":"sys_rule_03_010","ruleName":"截取符号之后字符","system":"1"},{"appId":"etl","applicationId":"home","categoryId":"sys_rule_03","classPath":"cn.restcloud.etl.rule.ext.SYS_RULE_03_011","createTime":"2022-04-17 21:38:23","creator":"admin","creatorName":"管理员","editor":"admin","editorName":"管理员","editTime":"2022-04-17 23:11:54","example":"","expireAfterIndexTime":"17/4/2022 15:00:06.359","id":"625c184f162baf07b8085f5b","inputParam":"0","paramDes":"","publicType":"1","remark":"","ruleCode":"package cn.restcloud.etl.rule.ext;\r\n\r\nimport org.apache.commons.lang3.StringUtils;\r\nimport org.bson.Document;\r\nimport java.sql.Connection;\r\nimport cn.restcloud.framework.core.context.*;\r\nimport cn.restcloud.etl.base.IETLBaseEvent;\r\nimport cn.restcloud.etl.base.IETLBaseProcessEngine;\r\nimport cn.restcloud.framework.core.util.*;\r\nimport cn.restcloud.framework.core.util.db.rdb.*;\r\nimport java.util.*;\r\n\r\n/**\r\n作为规则节点运行时,返回0表示终止流程运行,返回1表示成功流程可继续运行\r\n节点规则时indoc为上一节点流入数据,其他规则为行数据\r\nfieldId为绑定的字段Id,如果是节点则则为空\r\nparams为绑定规则时填写的传入的参数\r\n清除两端空格\r\n2022-04-17 21:38:23\r\nadmin\r\n*/\r\n\r\npublic class \tSYS_RULE_03_011 implements IETLBaseEvent {\r\n\r\n\t@Override\r\n\tpublic String execute(IETLBaseProcessEngine engine, Document modelNodeDoc, Document rowdoc,String fieldId,String params) throws Exception {\r\n\t   String value=DocumentUtil.getString(rowdoc,fieldId);\r\n\t    if(StringUtils.isNotBlank(value)){\r\n\t        rowdoc.put(fieldId,value.trim());\r\n\t    }\r\n\t\treturn \"1\";\r\n\t}\r\n\r\n}\r\n","ruleId":"sys_rule_03_011","ruleName":"清除两端空格","system":"1"},{"appId":"etl","applicationId":"","categoryId":"sys_rule_03","classPath":"cn.restcloud.etl.rule.ext.SYS_RULE_03_012","createTime":"2022-04-17 21:38:41","creator":"admin","creatorName":"管理员","editor":"admin","editorName":"管理员","editTime":"2022-04-17 23:11:54","example":"(参数:int,float,double,long) ","expireAfterIndexTime":"17/4/2022 15:02:13.554","id":"625c1861162baf07b8086010","inputParam":"1","paramDes":"[{\"id\":1,\"EditFlag\":true,\"fieldType\":\"string\",\"breakFlag\":true,\"required\":false,\"in\":\"query\",\"defaultValue\":\"\",\"maxLength\":\"0\",\"minLength\":\"0\",\"order\":1,\"fieldId\":\"fieldType\",\"fieldName\":\"要转换的字段类型:int,float,double,long\"}]","publicType":"1","remark":"字符串转为数字","ruleCode":"package cn.restcloud.etl.rule.ext;\r\n\r\nimport org.apache.commons.lang3.StringUtils;\r\nimport org.bson.Document;\r\nimport java.sql.Connection;\r\nimport cn.restcloud.framework.core.context.*;\r\nimport cn.restcloud.etl.base.IETLBaseEvent;\r\nimport cn.restcloud.etl.base.IETLBaseProcessEngine;\r\nimport cn.restcloud.framework.core.util.*;\r\nimport cn.restcloud.framework.core.util.db.rdb.*;\r\nimport java.util.*;\r\nimport com.alibaba.fastjson.JSONObject;\r\n\r\n/**\r\n作为规则节点运行时,返回0表示终止流程运行,返回1表示成功流程可继续运行\r\n节点规则时indoc为上一节点流入数据,其他规则为行数据\r\nfieldId为绑定的字段Id,如果是节点则则为空\r\nparams为绑定规则时填写的传入的参数\r\n字符串转为数字(参数:int,float,double,long) \r\n2022-04-17 21:38:41\r\nadmin\r\n*/\r\n\r\npublic class \tSYS_RULE_03_012 implements IETLBaseEvent {\r\n\r\n\t@Override\r\n\tpublic String execute(IETLBaseProcessEngine engine, Document modelNodeDoc, Document rowdoc,String fieldId,String params) throws Exception {\r\n\t    String fdValue=DocumentUtil.getString(rowdoc,fieldId);\r\n\t    JSONObject obj = JSONObject.parseObject(params);\r\n\t    String fieldType  = obj.getString(\"fieldType\");\r\n\t    fdValue=fdValue.replace(\",\",\"\"); //有些数字是用,号分隔的\r\n\t    if(StringUtils.isBlank(fdValue)){fdValue=\"0\";}\r\n\t    if(fieldType.equalsIgnoreCase(\"float\")){\r\n\t        float v=Float.parseFloat(fdValue);\r\n\t        rowdoc.put(fieldId,v);\r\n\t    }else if(fieldType.equalsIgnoreCase(\"double\")){\r\n\t        double v=Double.parseDouble(fdValue);\r\n\t        rowdoc.put(fieldId,v);\r\n\t    }else if(fieldType.equalsIgnoreCase(\"long\")){\r\n\t        fdValue=StringUtils.substringBefore(fdValue, \".\");\r\n\t        long v=Long.parseLong(fdValue);\r\n\t        rowdoc.put(fieldId,v);\r\n\t    }else{\r\n\t        int v=Integer.parseInt(fdValue);\r\n\t        rowdoc.put(fieldId,v);\r\n\t    }\r\n\t\treturn \"1\";\r\n\t}\r\n\r\n}\r\n","ruleId":"sys_rule_03_012","ruleName":"字符串转为数字","system":"1"},{"appId":"etl","applicationId":"home","categoryId":"sys_rule_04","classPath":"cn.restcloud.etl.rule.ext.ETL_625c1878162baf07b80860d3","createTime":"2022-04-17 21:39:04","creator":"admin","creatorName":"管理员","editor":"admin","editorName":"管理员","editTime":"2022-04-17 23:11:54","example":"","expireAfterIndexTime":"17/4/2022 13:48:24.139","id":"625c1878162baf07b80860d6","inputParam":"0","paramDes":"","publicType":"1","remark":"","ruleCode":"package cn.restcloud.etl.rule.ext;\r\n\r\nimport org.apache.commons.lang3.StringUtils;\r\nimport org.bson.Document;\r\nimport java.sql.Connection;\r\nimport cn.restcloud.framework.core.context.*;\r\nimport cn.restcloud.etl.base.IETLBaseEvent;\r\nimport cn.restcloud.etl.base.IETLBaseProcessEngine;\r\nimport cn.restcloud.framework.core.util.*;\r\nimport cn.restcloud.framework.core.util.db.rdb.*;\r\nimport java.util.*;\r\n\r\n/**\r\n作为规则节点运行时,返回0表示终止流程运行,返回1表示成功流程可继续运行\r\n节点规则时indoc为上一节点流入数据,其他规则为行数据\r\nfieldId为绑定的字段Id,如果是节点则则为空\r\nparams为绑定规则时填写的传入的参数\r\n生成32位全局唯一UUID \r\n2022-04-17 21:39:04\r\nadmin\r\n*/\r\n\r\npublic class ETL_625c1878162baf07b80860d3 implements IETLBaseEvent {\r\n\r\n\t@Override\r\n\tpublic String execute(IETLBaseProcessEngine engine, Document modelNodeDoc, Document rowdoc,String fieldId,String params) throws Exception {\r\n\t    String uuid=CommonUtil.getUUID();\r\n\t    rowdoc.put(fieldId,uuid);\r\n\t\treturn \"1\";\r\n\t}\r\n\r\n}\r\n","ruleId":"sys_rule_04_010","ruleName":"生成32位全局唯一UUID ","system":"1"},{"appId":"etl","applicationId":"home","categoryId":"sys_rule_04","classPath":"cn.restcloud.etl.rule.ext.ETL_625c1884162baf07b808613b","createTime":"2022-04-17 21:39:16","creator":"admin","creatorName":"管理员","editor":"admin","editorName":"管理员","editTime":"2022-04-17 23:11:54","example":"","expireAfterIndexTime":"17/4/2022 14:30:12.257","id":"625c1884162baf07b808613e","inputParam":"0","paramDes":"","publicType":"1","remark":"生产24位的唯一ID","ruleCode":"package cn.restcloud.etl.rule.ext;\r\n\r\nimport org.apache.commons.lang3.StringUtils;\r\nimport org.bson.Document;\r\nimport java.sql.Connection;\r\nimport cn.restcloud.framework.core.context.*;\r\nimport cn.restcloud.etl.base.IETLBaseEvent;\r\nimport cn.restcloud.etl.base.IETLBaseProcessEngine;\r\nimport cn.restcloud.framework.core.util.*;\r\nimport cn.restcloud.framework.core.util.db.rdb.*;\r\nimport java.util.*;\r\n\r\n/**\r\n作为规则节点运行时,返回0表示终止流程运行,返回1表示成功流程可继续运行\r\n节点规则时indoc为上一节点流入数据,其他规则为行数据\r\nfieldId为绑定的字段Id,如果是节点则则为空\r\nparams为绑定规则时填写的传入的参数\r\n生成22位唯一ID\r\n2022-04-17 21:39:16\r\nadmin\r\n*/\r\n\r\npublic class ETL_625c1884162baf07b808613b implements IETLBaseEvent {\r\n\r\n\t@Override\r\n\tpublic String execute(IETLBaseProcessEngine engine, Document modelNodeDoc, Document rowdoc,String fieldId,String params) throws Exception {\r\n\t    String id=DocumentUtil.getNewDocumentId();\r\n\t    rowdoc.put(fieldId,id);\r\n\t\treturn \"1\";\r\n\t}\r\n\r\n}\r\n","ruleId":"sys_rule_04_009","ruleName":"生成24位唯一ID","system":"1"},{"appId":"etl","applicationId":"home","categoryId":"sys_rule_04","classPath":"cn.restcloud.etl.rule.ext.ETL_625c188c162baf07b8086184","createTime":"2022-04-17 21:39:24","creator":"admin","creatorName":"管理员","editor":"admin","editorName":"管理员","editTime":"2022-04-17 23:11:54","example":"","expireAfterIndexTime":"17/4/2022 14:27:35.131","id":"625c188c162baf07b8086187","inputParam":"0","paramDes":"","publicType":"1","remark":"随机生产手机号码","ruleCode":"package cn.restcloud.etl.rule.ext;\r\n\r\nimport org.apache.commons.lang3.StringUtils;\r\nimport org.bson.Document;\r\nimport java.sql.Connection;\r\nimport cn.restcloud.framework.core.context.*;\r\nimport cn.restcloud.etl.base.IETLBaseEvent;\r\nimport cn.restcloud.etl.base.IETLBaseProcessEngine;\r\nimport cn.restcloud.framework.core.util.*;\r\nimport cn.restcloud.framework.core.util.db.rdb.*;\r\nimport java.util.*;\r\n\r\n/**\r\n作为规则节点运行时,返回0表示终止流程运行,返回1表示成功流程可继续运行\r\n节点规则时indoc为上一节点流入数据,其他规则为行数据\r\nfieldId为绑定的字段Id,如果是节点则则为空\r\nparams为绑定规则时填写的传入的参数\r\n随机生成手机号码\r\n2022-04-17 21:39:24\r\nadmin\r\n*/\r\n\r\npublic class ETL_625c188c162baf07b8086184 implements IETLBaseEvent {\r\n\r\n\tprivate static String[] telFirst=\"134,135,136,137,138,139,150,151,152,157,158,159,130,131,132,155,156,133,153,171,199,180\".split(\",\");\r\n\r\n\t@Override\r\n\tpublic String execute(IETLBaseProcessEngine engine, Document modelNodeDoc, Document indoc,String fieldId,String params) throws Exception {\r\n\t    indoc.put(fieldId,getTel());\r\n\t\treturn \"1\";\r\n\t}\r\n\r\n\r\n    private String getTel() {\r\n        int index=getNum(0,telFirst.length-1);\r\n        String first=telFirst[index];\r\n        String second=String.valueOf(getNum(1,888)+10000).substring(1);\r\n        String third=String.valueOf(getNum(1,9100)+10000).substring(1);\r\n        return first+second+third;\r\n    }\r\n    \r\n    public int getNum(int start,int end) {\r\n        return (int)(Math.random()*(end-start+1)+start);\r\n    }\r\n\r\n}\r\n","ruleId":"sys_rule_04_002","ruleName":"随机生成手机号码","system":"1"},{"appId":"etl","applicationId":"home","categoryId":"sys_rule_04","classPath":"cn.restcloud.etl.rule.ext.ETL_625c1893162baf07b80861cb","createTime":"2022-04-17 21:39:31","creator":"admin","creatorName":"管理员","editor":"admin","editorName":"管理员","editTime":"2022-04-17 23:11:54","example":"","expireAfterIndexTime":"17/4/2022 14:14:33.077","id":"625c1893162baf07b80861ce","inputParam":"0","paramDes":"","publicType":"1","remark":"","ruleCode":"package cn.restcloud.etl.rule.ext;\r\n\r\nimport org.apache.commons.lang3.StringUtils;\r\nimport org.bson.Document;\r\nimport java.sql.Connection;\r\nimport cn.restcloud.framework.core.context.*;\r\nimport cn.restcloud.etl.base.IETLBaseEvent;\r\nimport cn.restcloud.etl.base.IETLBaseProcessEngine;\r\nimport cn.restcloud.framework.core.util.*;\r\nimport cn.restcloud.framework.core.util.db.rdb.*;\r\nimport java.util.*;\r\n\r\n/**\r\n作为规则节点运行时,返回0表示终止流程运行,返回1表示成功流程可继续运行\r\n节点规则时indoc为上一节点流入数据,其他规则为行数据\r\nfieldId为绑定的字段Id,如果是节点则则为空\r\nparams为绑定规则时填写的传入的参数\r\n随机生成邮件地址\r\n2022-04-17 21:39:31\r\nadmin\r\n*/\r\n\r\npublic class ETL_625c1893162baf07b80861cb implements IETLBaseEvent {\r\n\r\n\tprivate static final String[] email_suffix=\"@gmail.com,@yahoo.com,@msn.com,@hotmail.com,@aol.com,@ask.com,@live.com,@qq.com,@0355.net,@163.com,@163.net,@263.net,@3721.net,@yeah.net,@googlemail.com,@126.com,@sina.com,@sohu.com,@yahoo.com.cn\".split(\",\");\r\n    private static String base = \"abcdefghijklmnopqrstuvwxyz0123456789\";\r\n    \r\n\t@Override\r\n\tpublic String execute(IETLBaseProcessEngine engine, Document modelNodeDoc, Document rowdoc,String fieldId,String params) throws Exception {\r\n\t    rowdoc.put(fieldId,getEmail(6,9));\r\n\t\treturn \"1\";\r\n\t}\r\n\r\n    public String getEmail(int lMin,int lMax) {\r\n        int length=getNum(lMin,lMax);\r\n        StringBuffer sb = new StringBuffer();\r\n        for (int i = 0; i < length; i++) {\r\n            int number = (int)(Math.random()*base.length());\r\n            sb.append(base.charAt(number));\r\n        }\r\n        sb.append(email_suffix[(int)(Math.random()*email_suffix.length)]);\r\n        return sb.toString();\r\n    }\r\n    \r\n    public int getNum(int start,int end) {\r\n        return (int)(Math.random()*(end-start+1)+start);\r\n    }\r\n\r\n}\r\n","ruleId":"sys_rule_04_003","ruleName":"随机生成邮件地址","system":"1"},{"appId":"etl","applicationId":"home","categoryId":"sys_rule_04","classPath":"cn.restcloud.etl.rule.ext.ETL_625c189a162baf07b808620d","createTime":"2022-04-17 21:39:38","creator":"admin","creatorName":"管理员","editor":"admin","editorName":"管理员","editTime":"2022-04-17 23:11:54","example":"","expireAfterIndexTime":"17/4/2022 14:15:29.493","id":"625c189a162baf07b8086210","inputParam":"0","paramDes":"","publicType":"1","remark":"","ruleCode":"package cn.restcloud.etl.rule.ext;\r\n\r\nimport org.apache.commons.lang3.StringUtils;\r\nimport org.bson.Document;\r\nimport java.sql.Connection;\r\nimport cn.restcloud.framework.core.context.*;\r\nimport cn.restcloud.etl.base.IETLBaseEvent;\r\nimport cn.restcloud.etl.base.IETLBaseProcessEngine;\r\nimport cn.restcloud.framework.core.util.*;\r\nimport cn.restcloud.framework.core.util.db.rdb.*;\r\nimport java.util.*;\r\n\r\n/**\r\n作为规则节点运行时,返回0表示终止流程运行,返回1表示成功流程可继续运行\r\n节点规则时indoc为上一节点流入数据,其他规则为行数据\r\nfieldId为绑定的字段Id,如果是节点则则为空\r\nparams为绑定规则时填写的传入的参数\r\n随机生成中文用户名\r\n2022-04-17 21:39:38\r\nadmin\r\n*/\r\n\r\npublic class ETL_625c189a162baf07b808620d implements IETLBaseEvent {\r\n\r\n\tprivate static String firstName=\"赵钱孙李周吴郑王冯陈褚卫蒋沈韩杨朱秦尤许何吕施张孔曹严华金魏陶姜戚谢邹喻柏水窦章云苏潘葛奚范彭郎鲁韦昌马苗凤花方俞任袁柳酆鲍史唐费廉岑薛雷贺倪汤滕殷罗毕郝邬安常乐于时傅皮卞齐康伍余元卜顾孟平黄和穆萧尹姚邵湛汪祁毛禹狄米贝明臧计伏成戴谈宋茅庞熊纪舒屈项祝董梁杜阮蓝闵席季麻强贾路娄危江童颜郭梅盛林刁钟徐邱骆高夏蔡田樊胡凌霍虞万支柯咎管卢莫经房裘缪干解应宗宣丁贲邓郁单杭洪包诸左石崔吉钮龚程嵇邢滑裴陆荣翁荀羊於惠甄魏加封芮羿储靳汲邴糜松井段富巫乌焦巴弓牧隗山谷车侯宓蓬全郗班仰秋仲伊宫宁仇栾暴甘钭厉戎祖武符刘姜詹束龙叶幸司韶郜黎蓟薄印宿白怀蒲台从鄂索咸籍赖卓蔺屠蒙池乔阴郁胥能苍双闻莘党翟谭贡劳逄姬申扶堵冉宰郦雍却璩桑桂濮牛寿通边扈燕冀郏浦尚农温别庄晏柴瞿阎充慕连茹习宦艾鱼容向古易慎戈廖庚终暨居衡步都耿满弘匡国文寇广禄阙东殴殳沃利蔚越夔隆师巩厍聂晁勾敖融冷訾辛阚那简饶空曾毋沙乜养鞠须丰巢关蒯相查后江红游竺权逯盖益桓公万俟司马上官欧阳夏侯诸葛闻人东方赫连皇甫尉迟公羊澹台公冶宗政濮阳淳于仲孙太叔申屠公孙乐正轩辕令狐钟离闾丘长孙慕容鲜于宇文司徒司空亓官司寇仉督子车颛孙端木巫马公西漆雕乐正壤驷公良拓拔夹谷宰父谷粱晋楚阎法汝鄢涂钦段干百里东郭南门呼延归海羊舌微生岳帅缑亢况后有琴梁丘左丘东门西门商牟佘佴伯赏南宫墨哈谯笪年爱阳佟第五言福百家姓续\";\r\n    private static String girl=\"秀娟英华慧巧美娜静淑惠珠翠雅芝玉萍红娥玲芬芳燕彩春菊兰凤洁梅琳素云莲真环雪荣爱妹霞香月莺媛艳瑞凡佳嘉琼勤珍贞莉桂娣叶璧璐娅琦晶妍茜秋珊莎锦黛青倩婷姣婉娴瑾颖露瑶怡婵雁蓓纨仪荷丹蓉眉君琴蕊薇菁梦岚苑婕馨瑗琰韵融园艺咏卿聪澜纯毓悦昭冰爽琬茗羽希宁欣飘育滢馥筠柔竹霭凝晓欢霄枫芸菲寒伊亚宜可姬舒影荔枝思丽 \";\r\n    private static String boy=\"伟刚勇毅俊峰强军平保东文辉力明永健世广志义兴良海山仁波宁贵福生龙元全国胜学祥才发武新利清飞彬富顺信子杰涛昌成康星光天达安岩中茂进林有坚和彪博诚先敬震振壮会思群豪心邦承乐绍功松善厚庆磊民友裕河哲江超浩亮政谦亨奇固之轮翰朗伯宏言若鸣朋斌梁栋维启克伦翔旭鹏泽晨辰士以建家致树炎德行时泰盛雄琛钧冠策腾楠榕风航弘\";\r\n    private static String name_sex = \"\";\r\n    \r\n\t@Override\r\n\tpublic String execute(IETLBaseProcessEngine engine, Document modelNodeDoc, Document rowdoc,String fieldId,String params) throws Exception {\r\n\t    rowdoc.put(fieldId,getChineseName());\r\n\t\treturn \"1\";\r\n\t}\r\n\r\n    private String getChineseName() {\r\n        int index=getNum(0, firstName.length()-1);\r\n        String first=firstName.substring(index, index+1);\r\n        int sex=getNum(0,1);\r\n        String str=boy;\r\n        int length=boy.length();\r\n        if(sex==0){\r\n            str=girl;\r\n            length=girl.length();\r\n            name_sex = \"女\";\r\n        }else {\r\n            name_sex=\"男\";\r\n        }\r\n        index=getNum(0,length-1);\r\n        String second=str.substring(index, index+1);\r\n        int hasThird=getNum(0,1);\r\n        String third=\"\";\r\n        if(hasThird==1){\r\n            index=getNum(0,length-1);\r\n            third=str.substring(index, index+1);\r\n        }\r\n        return first+second+third;\r\n    }\r\n    \r\n    public int getNum(int start,int end) {\r\n        return (int)(Math.random()*(end-start+1)+start);\r\n    }\r\n\r\n}\r\n","ruleId":"sys_rule_04_004","ruleName":"随机生成中文用户名","system":"1"},{"appId":"etl","applicationId":"home","categoryId":"sys_rule_04","classPath":"cn.restcloud.etl.rule.ext.ETL_625c18a3162baf07b808625f","createTime":"2022-04-17 21:39:47","creator":"admin","creatorName":"管理员","editor":"admin","editorName":"管理员","editTime":"2022-04-17 23:11:54","example":"","expireAfterIndexTime":"17/4/2022 14:15:50.86","id":"625c18a3162baf07b8086262","inputParam":"0","paramDes":"","publicType":"1","remark":"","ruleCode":"package cn.restcloud.etl.rule.ext;\r\n\r\nimport org.apache.commons.lang3.StringUtils;\r\nimport org.bson.Document;\r\nimport java.sql.Connection;\r\nimport cn.restcloud.framework.core.context.*;\r\nimport cn.restcloud.etl.base.IETLBaseEvent;\r\nimport cn.restcloud.etl.base.IETLBaseProcessEngine;\r\nimport cn.restcloud.framework.core.util.*;\r\nimport cn.restcloud.framework.core.util.db.rdb.*;\r\nimport java.util.*;\r\n\r\n/**\r\n作为规则节点运行时,返回0表示终止流程运行,返回1表示成功流程可继续运行\r\n节点规则时indoc为上一节点流入数据,其他规则为行数据\r\nfieldId为绑定的字段Id,如果是节点则则为空\r\nparams为绑定规则时填写的传入的参数\r\n随机生成地址\r\n2022-04-17 21:39:47\r\nadmin\r\n*/\r\n\r\npublic class ETL_625c18a3162baf07b808625f implements IETLBaseEvent {\r\n\r\n\tprivate static String[] road=\"重庆大厦,黑龙江路,十梅庵街,遵义路,湘潭街,瑞金广场,仙山街,仙山东路,仙山西大厦,白沙河路,赵红广场,机场路,民航街,长城南路,流亭立交桥,虹桥广场,长城大厦,礼阳路,风岗街,中川路,白塔广场,兴阳路,文阳街,绣城路,河城大厦,锦城广场,崇阳街,华城路,康城街,正阳路,和阳广场,中城路,江城大厦,顺城路,安城街,山城广场,春城街,国城路,泰城街,德阳路,明阳大厦,春阳路,艳阳街,秋阳路,硕阳街,青威高速,瑞阳街,丰海路,双元大厦,惜福镇街道,夏庄街道,古庙工业园,中山街,太平路,广西街,潍县广场,博山大厦,湖南路,济宁街,芝罘路,易州广场,荷泽四路,荷泽二街,荷泽一路,荷泽三大厦,观海二广场,广西支街,观海一路,济宁支街,莒县路,平度广场,明水路,蒙阴大厦,青岛路,湖北街,江宁广场,郯城街,天津路,保定街,安徽路,河北大厦,黄岛路,北京街,莘县路,济南街,宁阳广场,日照街,德县路,新泰大厦,荷泽路,山西广场,沂水路,肥城街,兰山路,四方街,平原广场,泗水大厦,浙江路,曲阜街,寿康路,河南广场,泰安路,大沽街,红山峡支路,西陵峡一大厦,台西纬一广场,台西纬四街,台西纬二路,西陵峡二街,西陵峡三路,台西纬三广场,台西纬五路,明月峡大厦,青铜峡路,台西二街,观音峡广场,瞿塘峡街,团岛二路,团岛一街,台西三路,台西一大厦,郓城南路,团岛三街,刘家峡路,西藏二街,西藏一广场,台西四街,三门峡路,城武支大厦,红山峡路,郓城北广场,龙羊峡路,西陵峡街,台西五路,团岛四街,石村广场,巫峡大厦,四川路,寿张街,嘉祥路,南村广场,范县路,西康街,云南路,巨野大厦,西江广场,鱼台街,单县路,定陶街,滕县路,钜野广场,观城路,汶上大厦,朝城路,滋阳街,邹县广场,濮县街,磁山路,汶水街,西藏路,城武大厦,团岛路,南阳街,广州路,东平街,枣庄广场,贵州街,费县路,南海大厦,登州路,文登广场,信号山支路,延安一街,信号山路,兴安支街,福山支广场,红岛支大厦,莱芜二路,吴县一街,金口三路,金口一广场,伏龙山路,鱼山支街,观象二路,吴县二大厦,莱芜一广场,金口二街,海阳路,龙口街,恒山路,鱼山广场,掖县路,福山大厦,红岛路,常州街,大学广场,龙华街,齐河路,莱阳街,黄县路,张店大厦,祚山路,苏州街,华山路,伏龙街,江苏广场,龙江街,王村路,琴屿大厦,齐东路,京山广场,龙山路,牟平街,延安三路,延吉街,南京广场,东海东大厦,银川西路,海口街,山东路,绍兴广场,芝泉路,东海中街,宁夏路,香港西大厦,隆德广场,扬州街,郧阳路,太平角一街,宁国二支路,太平角二广场,天台东一路,太平角三大厦,漳州路一路,漳州街二街,宁国一支广场,太平角六街,太平角四路,天台东二街,太平角五路,宁国三大厦,澳门三路,江西支街,澳门二路,宁国四街,大尧一广场,咸阳支街,洪泽湖路,吴兴二大厦,澄海三路,天台一广场,新湛二路,三明北街,新湛支路,湛山五街,泰州三广场,湛山四大厦,闽江三路,澳门四街,南海支路,吴兴三广场,三明南路,湛山二街,二轻新村镇,江南大厦,吴兴一广场,珠海二街,嘉峪关路,高邮湖街,湛山三路,澳门六广场,泰州二路,东海一大厦,天台二路,微山湖街,洞庭湖广场,珠海支街,福州南路,澄海二街,泰州四路,香港中大厦,澳门五路,新湛三街,澳门一路,正阳关街,宁武关广场,闽江四街,新湛一路,宁国一大厦,王家麦岛,澳门七广场,泰州一路,泰州六街,大尧二路,青大一街,闽江二广场,闽江一大厦,屏东支路,湛山一街,东海西路,徐家麦岛函谷关广场,大尧三路,晓望支街,秀湛二路,逍遥三大厦,澳门九广场,泰州五街,澄海一路,澳门八街,福州北路,珠海一广场,宁国二路,临淮关大厦,燕儿岛路,紫荆关街,武胜关广场,逍遥一街,秀湛四路,居庸关街,山海关路,鄱阳湖大厦,新湛路,漳州街,仙游路,花莲街,乐清广场,巢湖街,台南路,吴兴大厦,新田路,福清广场,澄海路,莆田街,海游路,镇江街,石岛广场,宜兴大厦,三明路,仰口街,沛县路,漳浦广场,大麦岛,台湾街,天台路,金湖大厦,高雄广场,海江街,岳阳路,善化街,荣成路,澳门广场,武昌路,闽江大厦,台北路,龙岩街,咸阳广场,宁德街,龙泉路,丽水街,海川路,彰化大厦,金田路,泰州街,太湖路,江西街,泰兴广场,青大街,金门路,南通大厦,旌德路,汇泉广场,宁国路,泉州街,如东路,奉化街,鹊山广场,莲岛大厦,华严路,嘉义街,古田路,南平广场,秀湛路,长汀街,湛山路,徐州大厦,丰县广场,汕头街,新竹路,黄海街,安庆路,基隆广场,韶关路,云霄大厦,新安路,仙居街,屏东广场,晓望街,海门路,珠海街,上杭路,永嘉大厦,漳平路,盐城街,新浦路,新昌街,高田广场,市场三街,金乡东路,市场二大厦,上海支路,李村支广场,惠民南路,市场纬街,长安南路,陵县支街,冠县支广场,小港一大厦,市场一路,小港二街,清平路,广东广场,新疆路,博平街,港通路,小港沿,福建广场,高唐街,茌平路,港青街,高密路,阳谷广场,平阴路,夏津大厦,邱县路,渤海街,恩县广场,旅顺街,堂邑路,李村街,即墨路,港华大厦,港环路,馆陶街,普集路,朝阳街,甘肃广场,港夏街,港联路,陵县大厦,上海路,宝山广场,武定路,长清街,长安路,惠民街,武城广场,聊城大厦,海泊路,沧口街,宁波路,胶州广场,莱州路,招远街,冠县路,六码头,金乡广场,禹城街,临清路,东阿街,吴淞路,大港沿,辽宁路,棣纬二大厦,大港纬一路,贮水山支街,无棣纬一广场,大港纬三街,大港纬五路,大港纬四街,大港纬二路,无棣二大厦,吉林支路,大港四街,普集支路,无棣三街,黄台支广场,大港三街,无棣一路,贮水山大厦,泰山支路,大港一广场,无棣四路,大连支街,大港二路,锦州支街,德平广场,高苑大厦,长山路,乐陵街,临邑路,嫩江广场,合江路,大连街,博兴路,蒲台大厦,黄台广场,城阳街,临淄路,安邱街,临朐路,青城广场,商河路,热河大厦,济阳路,承德街,淄川广场,辽北街,阳信路,益都街,松江路,流亭大厦,吉林路,恒台街,包头路,无棣街,铁山广场,锦州街,桓台路,兴安大厦,邹平路,胶东广场,章丘路,丹东街,华阳路,青海街,泰山广场,周村大厦,四平路,台东西七街,台东东二路,台东东七广场,台东西二路,东五街,云门二路,芙蓉山村,延安二广场,云门一街,台东四路,台东一街,台东二路,杭州支广场,内蒙古路,台东七大厦,台东六路,广饶支街,台东八广场,台东三街,四平支路,郭口东街,青海支路,沈阳支大厦,菜市二路,菜市一街,北仲三路,瑞云街,滨县广场,庆祥街,万寿路,大成大厦,芙蓉路,历城广场,大名路,昌平街,平定路,长兴街,浦口广场,诸城大厦,和兴路,德盛街,宁海路,威海广场,东山路,清和街,姜沟路,雒口大厦,松山广场,长春街,昆明路,顺兴街,利津路,阳明广场,人和路,郭口大厦,营口路,昌邑街,孟庄广场,丰盛街,埕口路,丹阳街,汉口路,洮南大厦,桑梓路,沾化街,山口路,沈阳街,南口广场,振兴街,通化路,福寺大厦,峄县路,寿光广场,曹县路,昌乐街,道口路,南九水街,台湛广场,东光大厦,驼峰路,太平山,标山路,云溪广场,太清路\".split(\",\");\r\n    \r\n\t@Override\r\n\tpublic String execute(IETLBaseProcessEngine engine, Document modelNodeDoc, Document rowdoc,String fieldId,String params) throws Exception {\r\n\t    rowdoc.put(fieldId,getRoad());\r\n\t\treturn \"1\";\r\n\t}\r\n\r\n    private String getRoad() {\r\n        int index=getNum(0,road.length-1);\r\n        String first=road[index];\r\n        String second=String.valueOf(getNum(11,150))+\"号\";\r\n        String third=\"-\"+getNum(1,20)+\"-\"+getNum(1,10);\r\n        return first+second+third;\r\n    }\r\n    \r\n    public int getNum(int start,int end) {\r\n        return (int)(Math.random()*(end-start+1)+start);\r\n    }\r\n\r\n}\r\n","ruleId":"sys_rule_04_005","ruleName":"随机生成地址","system":"1"},{"appId":"etl","applicationId":"home","categoryId":"sys_rule_04","classPath":"cn.restcloud.etl.rule.ext.ETL_625c18ae162baf07b80862c0","createTime":"2022-04-17 21:39:58","creator":"admin","creatorName":"管理员","editor":"admin","editorName":"管理员","editTime":"2022-04-17 23:11:54","example":"","expireAfterIndexTime":"17/4/2022 14:16:41.311","id":"625c18ae162baf07b80862c3","inputParam":"0","paramDes":"","publicType":"1","remark":"(参数时间格式:yyyy-MM-dd HH:mm:ss)","ruleCode":"package cn.restcloud.etl.rule.ext;\r\n\r\nimport org.apache.commons.lang3.StringUtils;\r\nimport org.bson.Document;\r\nimport java.sql.Connection;\r\nimport cn.restcloud.framework.core.context.*;\r\nimport cn.restcloud.etl.base.IETLBaseEvent;\r\nimport cn.restcloud.etl.base.IETLBaseProcessEngine;\r\nimport cn.restcloud.framework.core.util.*;\r\nimport cn.restcloud.framework.core.util.db.rdb.*;\r\nimport java.util.*;\r\n\r\n/**\r\n作为规则节点运行时,返回0表示终止流程运行,返回1表示成功流程可继续运行\r\n节点规则时indoc为上一节点流入数据,其他规则为行数据\r\nfieldId为绑定的字段Id,如果是节点则则为空\r\nparams为绑定规则时填写的传入的参数\r\n随机生成时间\r\n2022-04-17 21:39:58\r\nadmin\r\n*/\r\n\r\npublic class ETL_625c18ae162baf07b80862c0 implements IETLBaseEvent {\r\n\r\n\t@Override\r\n\tpublic String execute(IETLBaseProcessEngine engine, Document modelNodeDoc, Document rowdoc,String fieldId,String params) throws Exception {\r\n\t    if(StringUtils.isBlank(params)){\r\n\t        params=\"yyyy-MM-dd HH:mm:ss\";\r\n\t    }\r\n\t    Date date = randomDate(\"2018-01-01\",DateTimeUtil.getNow(\"yyyy-MM-dd\"));\r\n\t\trowdoc.put(fieldId,DateTimeUtil.formatDateTime(date,params));\r\n\t\treturn \"1\";\r\n\t}\r\n\r\n    private  Date randomDate(String beginDate,String endDate){\r\n        try {\r\n            SimpleDateFormat format = new SimpleDateFormat(\"yyyy-MM-dd\");\r\n            Date start = format.parse(beginDate);\r\n            Date end = format.parse(endDate);\r\n \r\n            if(start.getTime() >= end.getTime()){\r\n                return null;\r\n            }\r\n            long date = random(start.getTime(),end.getTime());\r\n            return new Date(date);\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n        return null;\r\n    }\r\n \r\n    private  long random(long begin,long end){\r\n        long rtn = begin + (long)(Math.random() * (end - begin));\r\n        if(rtn == begin || rtn == end){\r\n            return random(begin,end);\r\n        }\r\n        return rtn;\r\n    }\r\n}\r\n","ruleId":"sys_rule_04_006","ruleName":"随机生成时间","system":"1"},{"ruleId":"sys_rule_04_008","ruleName":"当前时间","ruleCode":"package cn.restcloud.etl.rule.ext;\r\n\r\nimport org.apache.commons.lang3.StringUtils;\r\nimport org.bson.Document;\r\nimport java.sql.Connection;\r\nimport cn.restcloud.framework.core.context.*;\r\nimport cn.restcloud.etl.base.IETLBaseEvent;\r\nimport cn.restcloud.etl.base.IETLBaseProcessEngine;\r\nimport cn.restcloud.framework.core.util.*;\r\nimport cn.restcloud.framework.core.util.db.rdb.*;\r\nimport java.util.*;\r\n\r\n/**\r\n作为规则节点运行时,返回0表示终止流程运行,返回1表示成功流程可继续运行\r\n节点规则时indoc为上一节点流入数据,其他规则为行数据\r\nfieldId为绑定的字段Id,如果是节点则则为空\r\nparams为绑定规则时填写的传入的参数\r\n当前时间\r\n2022-04-17 22:19:28\r\nadmin\r\n*/\r\n\r\npublic class ETL_625c21f0162baf07b808a922 implements IETLBaseEvent {\r\n\r\n\t@Override\r\n\tpublic String execute(IETLBaseProcessEngine engine, Document modelNodeDoc, Document rowdoc,String fieldId,String params) throws Exception {\r\n\t    //时间格式为yyyy-MM-dd HH:mm:ss\r\n\t    params=\"yyyy-MM-dd HH:mm:ss\";\r\n\t    System.out.println(params);\r\n\t\tString dateStr=DateTimeUtil.getNow(params);\r\n\t\trowdoc.put(fieldId,dateStr);\r\n\t\treturn \"1\";\r\n\t}\r\n\r\n}\r\n","categoryId":"sys_rule_04","remark":"(默认参数:yyyy-MM-dd HH:mm:ss) ","classPath":"cn.restcloud.etl.rule.ext.ETL_625c21f0162baf07b808a922","publicType":1,"applicationId":"home","system":"1","inputParam":"0","paramDes":"","example":"","id":"625c21f0162baf07b808a925","appId":"etl","createTime":"2022-04-17 22:19:28","creator":"admin","creatorName":"管理员","editTime":"2022-04-21 18:16:03","editor":"admin","editorName":"管理员"},{"appId":"etl","applicationId":"home","categoryId":"sys_rule_04","classPath":"cn.restcloud.etl.rule.ext.ETL_625c21ff162baf07b808a9a4","createTime":"2022-04-17 22:19:43","creator":"admin","creatorName":"管理员","editor":"admin","editorName":"管理员","editTime":"2022-04-17 23:11:54","example":"","expireAfterIndexTime":"17/4/2022 14:38:55.985","id":"625c21ff162baf07b808a9a7","inputParam":"0","paramDes":"","publicType":"1","remark":"","ruleCode":"package cn.restcloud.etl.rule.ext;\r\n\r\nimport org.apache.commons.lang3.StringUtils;\r\nimport org.bson.Document;\r\nimport java.sql.Connection;\r\nimport cn.restcloud.framework.core.context.*;\r\nimport cn.restcloud.etl.base.IETLBaseEvent;\r\nimport cn.restcloud.etl.base.IETLBaseProcessEngine;\r\nimport cn.restcloud.framework.core.util.*;\r\nimport cn.restcloud.framework.core.util.db.rdb.*;\r\nimport java.util.*;\r\n\r\n/**\r\n作为规则节点运行时,返回0表示终止流程运行,返回1表示成功流程可继续运行\r\n节点规则时indoc为上一节点流入数据,其他规则为行数据\r\nfieldId为绑定的字段Id,如果是节点则则为空\r\nparams为绑定规则时填写的传入的参数\r\n生成6位随机数 \r\n2022-04-17 22:19:43\r\nadmin\r\n*/\r\n\r\npublic class ETL_625c21ff162baf07b808a9a4 implements IETLBaseEvent {\r\n\r\n\t@Override\r\n\tpublic String execute(IETLBaseProcessEngine engine, Document modelNodeDoc, Document rowdoc,String fieldId,String params) throws Exception {\r\n\t\tString no=String.valueOf(CommonUtil.getRandom(100001,999999));\r\n\t\trowdoc.put(fieldId,no);\r\n\t\treturn \"1\";\r\n\t}\r\n\r\n}\r\n","ruleId":"sys_rule_04_007","ruleName":"生成6位随机数 ","system":"1"},{"appId":"etl","applicationId":"home","categoryId":"sys_rule_05","classPath":"cn.restcloud.etl.rule.ext.ETL_625c2346162baf07b808b48d","createTime":"2022-04-17 22:25:10","creator":"admin","creatorName":"管理员","editor":"admin","editorName":"管理员","editTime":"2022-04-17 23:11:54","example":"","expireAfterIndexTime":"17/4/2022 14:28:11.139","id":"625c2346162baf07b808b490","inputParam":"0","paramDes":"","publicType":"1","remark":"","ruleCode":"package cn.restcloud.etl.rule.ext;\r\n\r\nimport org.apache.commons.lang3.StringUtils;\r\nimport org.bson.Document;\r\nimport java.sql.Connection;\r\nimport cn.restcloud.framework.core.context.*;\r\nimport cn.restcloud.etl.base.IETLBaseEvent;\r\nimport cn.restcloud.etl.base.IETLBaseProcessEngine;\r\nimport cn.restcloud.framework.core.util.*;\r\nimport cn.restcloud.framework.core.util.db.rdb.*;\r\nimport java.util.*;\r\n\r\n/**\r\n检测是否是数字\r\n2021-07-30 18:48:09\r\nadmin\r\n*/\r\n\r\npublic class ETL_625c2346162baf07b808b48d implements IETLBaseEvent {\r\n\r\n\t@Override\r\n\tpublic String execute(IETLBaseProcessEngine engine, Document modelNodeDoc, Document indoc,String fieldId,String params) throws Exception {\r\n\t    String fieldValue=DocumentUtil.getString(indoc,fieldId);\r\n\t    if(StringUtils.isNumeric(fieldValue)==false){\r\n\t        return \"0\";\r\n\t    }else{\r\n\t        return \"1\";\r\n\t    }\r\n\t}\r\n\r\n}\r\n","ruleId":"sys_rule_06_000","ruleName":"检测是否是数字","system":"1"},{"appId":"etl","applicationId":"home","categoryId":"sys_rule_05","classPath":"cn.restcloud.etl.rule.ext.ETL_625c234d162baf07b808b4d2","createTime":"2022-04-17 22:25:17","creator":"admin","creatorName":"管理员","editor":"admin","editorName":"管理员","editTime":"2022-04-17 23:11:54","example":"","expireAfterIndexTime":"17/4/2022 14:35:37.933","id":"625c234d162baf07b808b4d5","inputParam":"0","paramDes":"","publicType":"1","remark":"","ruleCode":"package cn.restcloud.etl.rule.ext;\r\n\r\nimport org.apache.commons.lang3.StringUtils;\r\nimport org.bson.Document;\r\nimport java.sql.Connection;\r\nimport cn.restcloud.framework.core.context.*;\r\nimport cn.restcloud.etl.base.IETLBaseEvent;\r\nimport cn.restcloud.etl.base.IETLBaseProcessEngine;\r\nimport cn.restcloud.framework.core.util.*;\r\nimport cn.restcloud.framework.core.util.db.rdb.*;\r\nimport java.util.*;\r\nimport java.util.regex.Pattern;\r\n\r\n/**\r\nparams为绑定规则时填写的传入的参数\r\n检测邮箱是否合法\r\n2021-07-30 18:46:29\r\nadmin\r\n*/\r\n\r\npublic class ETL_625c234d162baf07b808b4d2 implements IETLBaseEvent {\r\n\r\n    public static final String REGEX_EMAIL = \"^([a-z0-9A-Z]+[-|\\\\.]?)+[a-z0-9A-Z]@([a-z0-9A-Z]+(-[a-z0-9A-Z]+)?\\\\.)+[a-zA-Z]{2,}$\";\r\n\r\n\r\n\t@Override\r\n\tpublic String execute(IETLBaseProcessEngine engine, Document modelNodeDoc, Document indoc,String fieldId,String params) throws Exception {\r\n\t    String fieldValue=DocumentUtil.getString(indoc,fieldId);//获取url请求参数或者路径参数都可以\r\n\t\tif(Pattern.matches(REGEX_EMAIL, fieldValue)==false){\r\n\t\t    //不是合格的身份证号码\r\n\t\t\treturn \"0\";\r\n\t\t}else{\r\n\t\t    //是合格的手机号\r\n\t\t\treturn \"1\";\r\n\t\t}\r\n\t}\r\n\r\n}\r\n","ruleId":"sys_rule_06_001","ruleName":"检测邮箱是否合法","system":"1"},{"appId":"etl","applicationId":"home","categoryId":"sys_rule_05","classPath":"cn.restcloud.etl.rule.ext.ETL_625c2353162baf07b808b530","createTime":"2022-04-17 22:25:23","creator":"admin","creatorName":"管理员","editor":"admin","editorName":"管理员","editTime":"2022-04-17 23:11:54","example":"","expireAfterIndexTime":"17/4/2022 14:35:35.361","id":"625c2353162baf07b808b533","inputParam":"0","paramDes":"","publicType":"1","remark":"","ruleCode":"package cn.restcloud.etl.rule.ext;\r\n\r\nimport org.apache.commons.lang3.StringUtils;\r\nimport org.bson.Document;\r\nimport java.sql.Connection;\r\nimport cn.restcloud.framework.core.context.*;\r\nimport cn.restcloud.etl.base.IETLBaseEvent;\r\nimport cn.restcloud.etl.base.IETLBaseProcessEngine;\r\nimport cn.restcloud.framework.core.util.*;\r\nimport cn.restcloud.framework.core.util.db.rdb.*;\r\nimport java.util.*;\r\nimport java.util.regex.Pattern;\r\n\r\n/**\r\n检测是否是合法的身份证号码\r\n2021-07-30 18:39:24\r\nadmin\r\n*/\r\n\r\npublic class ETL_625c2353162baf07b808b530 implements IETLBaseEvent {\r\n\r\n    public static final String REGEX_EMAIL = \"^(\\\\d{6})()?(\\\\d{4})(\\\\d{2})(\\\\d{2})(\\\\d{3})(\\\\w)$\";\r\n     \r\n\t@Override\r\n\tpublic String execute(IETLBaseProcessEngine engine, Document modelNodeDoc, Document indoc,String fieldId,String params) throws Exception {\r\n\t\tString fieldValue=DocumentUtil.getString(indoc,fieldId);//获取url请求参数或者路径参数都可以\r\n\t\tif(Pattern.matches(REGEX_EMAIL, fieldValue)==false){\r\n\t\t    //不是合格的身份证号码\r\n\t\t\treturn \"0\";\r\n\t\t}else{\r\n\t\t    //是合格的手机号\r\n\t\t\treturn \"1\";\r\n\t\t}\r\n\t}\r\n\r\n}\r\n","ruleId":"sys_rule_06_002","ruleName":"检测身份证号码是否合法","system":"1"},{"appId":"etl","applicationId":"home","categoryId":"sys_rule_05","classPath":"cn.restcloud.etl.rule.ext.ETL_625c2358162baf07b808b564","createTime":"2022-04-17 22:25:28","creator":"admin","creatorName":"管理员","editor":"admin","editorName":"管理员","editTime":"2022-04-17 23:11:54","example":"","expireAfterIndexTime":"17/4/2022 14:35:33.138","id":"625c2358162baf07b808b567","inputParam":"0","paramDes":"","publicType":"1","remark":"","ruleCode":"package cn.restcloud.etl.rule.ext;\r\n\r\nimport org.apache.commons.lang3.StringUtils;\r\nimport org.bson.Document;\r\nimport java.sql.Connection;\r\nimport cn.restcloud.framework.core.context.*;\r\nimport cn.restcloud.etl.base.IETLBaseEvent;\r\nimport cn.restcloud.etl.base.IETLBaseProcessEngine;\r\nimport cn.restcloud.framework.core.util.*;\r\nimport cn.restcloud.framework.core.util.db.rdb.*;\r\nimport java.util.*;\r\nimport java.util.regex.Pattern;\r\n\r\n/**\r\nparams为绑定规则时填写的传入的参数\r\n检测电话号码是否合法\r\n2021-07-29 16:31:46\r\nadmin\r\n*/\r\n\r\npublic class ETL_625c2358162baf07b808b564 implements IETLBaseEvent {\r\n     public static final String REGEX_EMAIL = \"^((13[0-9])|(15[^4,\\\\D])|(18[0,5-9]))\\\\d{8}$\";\r\n\r\n\t@Override\r\n\tpublic String execute(IETLBaseProcessEngine engine, Document modelNodeDoc, Document indoc,String fieldId,String params) throws Exception {\r\n\t\tString fieldValue=DocumentUtil.getString(indoc,fieldId);//获取url请求参数或者路径参数都可以\r\n\t\tif(Pattern.matches(REGEX_EMAIL, fieldValue)==false){\r\n\t\t    //不是合格的手机号\r\n\t\t\treturn \"0\";\r\n\t\t}else{\r\n\t\t    //是合格的手机号\r\n\t\t\treturn \"1\";\r\n\t\t}\r\n\t}\r\n\r\n}\r\n","ruleId":"sys_rule_06_003","ruleName":"检测手机号码是否合法","system":"1"},{"appId":"etl","applicationId":"home","categoryId":"sys_rule_05","classPath":"cn.restcloud.etl.rule.ext.ETL_625c235e162baf07b808b5a6","createTime":"2022-04-17 22:25:34","creator":"admin","creatorName":"管理员","editor":"admin","editorName":"管理员","editTime":"2022-04-17 23:11:54","example":"","expireAfterIndexTime":"17/4/2022 14:52:35.973","id":"625c235e162baf07b808b5a9","inputParam":"1","paramDes":"[{\"id\":0,\"EditFlag\":true,\"fieldType\":\"int\",\"breakFlag\":true,\"required\":true,\"in\":\"query\",\"defaultValue\":\"\",\"maxLength\":\"0\",\"minLength\":\"0\",\"order\":1,\"fieldId\":\"minLength\",\"fieldName\":\"最小长度\"}]","publicType":"1","remark":"","ruleCode":"package cn.restcloud.etl.rule.ext;\r\n\r\nimport org.apache.commons.lang3.StringUtils;\r\nimport org.bson.Document;\r\nimport java.sql.Connection;\r\nimport cn.restcloud.framework.core.context.*;\r\nimport cn.restcloud.etl.base.IETLBaseEvent;\r\nimport cn.restcloud.etl.base.IETLBaseProcessEngine;\r\nimport cn.restcloud.framework.core.util.*;\r\nimport cn.restcloud.framework.core.util.db.rdb.*;\r\nimport java.util.*;\r\nimport com.alibaba.fastjson.JSONObject;\r\n\r\n/**\r\n长度检测\r\n2021-03-03 18:44:18\r\nadmin\r\n*/\r\n\r\npublic class ETL_625c235e162baf07b808b5a6 implements IETLBaseEvent {\r\n\r\n\t@Override\r\n\tpublic String execute(IETLBaseProcessEngine engine, Document modelNodeDoc, Document indoc,String fieldId,String params) throws Exception {\r\n\t    JSONObject obj = JSONObject.parseObject(params);\r\n\t\tint minLength = obj.getInteger(\"minLength\");//最小长度\r\n\t    String value=DocumentUtil.getString(indoc,fieldId);\r\n\t   \tif(value.length()<minLength){\r\n\t        return \"1\"; //符合条件\r\n\t    }else{\r\n\t        return \"0\"; //不符合条件\r\n\t    }\r\n\t}\r\n\r\n}\r\n","ruleId":"sys_rule_06_004","ruleName":"最小长度检测(需要长度参数)","system":"1"},{"appId":"etl","applicationId":"home","categoryId":"sys_rule_05","classPath":"cn.restcloud.etl.rule.ext.ETL_625c2364162baf07b808b5e0","createTime":"2022-04-17 22:25:40","creator":"admin","creatorName":"管理员","editor":"admin","editorName":"管理员","editTime":"2022-04-17 23:11:54","example":"","expireAfterIndexTime":"17/4/2022 14:34:31.079","id":"625c2364162baf07b808b5e3","inputParam":"0","paramDes":"","publicType":"1","remark":"","ruleCode":"package cn.restcloud.etl.rule.ext;\r\n\r\nimport org.apache.commons.lang3.StringUtils;\r\nimport org.bson.Document;\r\nimport java.sql.Connection;\r\nimport cn.restcloud.framework.core.context.*;\r\nimport cn.restcloud.etl.base.IETLBaseEvent;\r\nimport cn.restcloud.etl.base.IETLBaseProcessEngine;\r\nimport cn.restcloud.framework.core.util.*;\r\nimport cn.restcloud.framework.core.util.db.rdb.*;\r\nimport java.util.*;\r\n\r\n/**\r\n检测是否是空字符串\r\n2021-07-30 18:48:09\r\nadmin\r\n*/\r\npublic class ETL_625c2364162baf07b808b5e0 implements IETLBaseEvent {\r\n\r\n\t@Override\r\n\tpublic String execute(IETLBaseProcessEngine engine, Document modelNodeDoc, Document indoc,String fieldId,String params) throws Exception {\r\n\t    if(StringUtils.isBlank(DocumentUtil.getString(indoc,fieldId))){\r\n\t        return \"1\"; //符合条件\r\n\t    }else{\r\n\t        return \"0\"; //不符合条件\r\n\t    }\r\n\t}\r\n\r\n}\r\n","ruleId":"sys_rule_06_005","ruleName":"空字符串检测","system":"1"},{"appId":"etl","applicationId":"home","categoryId":"sys_rule_05","classPath":"cn.restcloud.etl.rule.ext.ETL_625c2369162baf07b808b61e","createTime":"2022-04-17 22:25:45","creator":"admin","creatorName":"管理员","editor":"admin","editorName":"管理员","editTime":"2022-04-17 23:11:54","example":"","expireAfterIndexTime":"17/4/2022 14:34:13.125","id":"625c2369162baf07b808b621","inputParam":"0","paramDes":"","publicType":"1","remark":"","ruleCode":"package cn.restcloud.etl.rule.ext;\r\n\r\nimport org.apache.commons.lang3.StringUtils;\r\nimport org.bson.Document;\r\nimport java.sql.Connection;\r\nimport cn.restcloud.framework.core.context.*;\r\nimport cn.restcloud.etl.base.IETLBaseEvent;\r\nimport cn.restcloud.etl.base.IETLBaseProcessEngine;\r\nimport cn.restcloud.framework.core.util.*;\r\nimport cn.restcloud.framework.core.util.db.rdb.*;\r\nimport java.util.*;\r\n\r\n/**\r\n检测是否是NULL\r\n2021-07-30 18:48:09\r\nadmin\r\n*/\r\n\r\n\r\npublic class ETL_625c2369162baf07b808b61e implements IETLBaseEvent {\r\n\r\n\t@Override\r\n\tpublic String execute(IETLBaseProcessEngine engine, Document modelNodeDoc, Document indoc,String fieldId,String params) throws Exception {\r\n\t    if(indoc.get(fieldId)==null){\r\n\t        return \"1\"; //符合条件\r\n\t    }else{\r\n\t        return \"0\"; //不符合条件\r\n\t    }\r\n\t}\r\n\r\n}\r\n","ruleId":"sys_rule_06_006","ruleName":"NULL值检测","system":"1"}]